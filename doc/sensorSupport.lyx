#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass mwart
\begin_preamble
\usepackage{colortbl}
\definecolor{maroon}{rgb}{0.5,0,0}
\definecolor{darkgreen}{rgb}{0,0.5,0}
\definecolor{gray}{RGB}{192, 192, 192}
\lstdefinelanguage{XML}
{
  basicstyle=\ttfamily\footnotesize,
  morestring=[b]",
  moredelim=[s][\bfseries\color{darkgreen}]{<}{\ },
  moredelim=[s][\bfseries\color{darkgreen}]{</}{>},
  moredelim=[l][\bfseries\color{darkgreen}]{/>},
  moredelim=[l][\bfseries\color{darkgreen}]{>},
  morecomment=[s]{<?}{?>},
  morecomment=[s]{<!--}{-->},
  commentstyle=\color{maroon},
  stringstyle=\color{blue},
  identifierstyle=\color{magenta}
}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex8
\index_command default
\float_placement H
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_title "Android Sensors Overview"
\pdf_author "Carlo Antenucci"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 1cm
\headsep 1cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict true
\end_header

\begin_body

\begin_layout Author
ALMA MATER STUDIORUM - UNIVERSITY OF BOLOGNA
\end_layout

\begin_layout Title
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{
\backslash
fill}
\end_layout

\end_inset


\size giant
Android Sensors Support
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\size large
Carlo Antenucci
\begin_inset Newline newline
\end_inset

carlo.antenucci@studio.unibo.it
\begin_inset Newline newline
\end_inset

carlo.antenucci@gmail.com
\size default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{
\backslash
fill}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Abstract
Most Android-powered device have several built-in sensors that measure motion,
 orientation and other various enviromental condition, provide raw data
 with high precision and accuracy, and are useful to monitor three-dimensional
 device movement and positioning or monitor changes in the ambiental environment
 near a device.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Abstract
Android platform supports three category of sensors:
\end_layout

\begin_layout Abstract

\series bold
Motion
\begin_inset space ~
\end_inset

sensors
\series default
: measure acceleration and rotational forces along three axis.
 This category includes 
\shape italic
accelerometer
\shape default
, g
\shape italic
ravity sensor
\shape default
, 
\shape italic
gyroscope
\shape default
 and 
\shape italic
rotational vector sensor
\shape default
.
\end_layout

\begin_layout Abstract

\series bold
Enviromental
\series default

\begin_inset space ~
\end_inset


\series bold
sensors
\series default
: sensors included in this category (
\shape italic
barometer
\shape default
, 
\shape italic
photometer
\shape default
 and 
\shape italic
thermometer
\shape default
) measure various enviromental parameters such as temperature, pressure,
 illumination, humidity.
\end_layout

\begin_layout Abstract
P
\series bold
osition
\begin_inset space ~
\end_inset

sensor
\series default
s: measure physical position of a device using 
\shape italic
orientation sensor 
\shape default
and 
\shape italic
magnetometer
\shape default
.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Abstract
The access to a sensor and the raw sensor data acquisition are simplified
 by using Android Sensor Framework
\series bold
 
\series default
that provides several classes and interfaces that helps developer to perform
 a large number of sensor-related task.
\end_layout

\begin_layout Abstract
The first part of this paper is based on the Adroid Developers sensors documenta
tion
\begin_inset CommandInset citation
LatexCommand citet
key "androidDev"

\end_inset

: introduces the Android sensor framework and explains how to use sensors.
\end_layout

\begin_layout Abstract
In the second part is introduced a new layer between Android Sensor Framework
 and the final application, developed as project activity related to the
 Engineering of Software System course.
 This layer simplifies the sensor usage and allow a developer to ask to
 the sensor his data value (Android Sensor Framework only notify a change,
 but developers cannot request information to the sensor without save the
 last update in a variable).
\end_layout

\begin_layout Abstract
All source code are available at 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/CarloAntenucci/Android-Sensors-Overview.git"

\end_inset

 
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Android Sensor Framework
\end_layout

\begin_layout Subsection
Introduction to sensors
\end_layout

\begin_layout Standard
The Android Sensor Framework lets access to access many type of sensors,
 some of these are hardware-based (real sensors) and some are are software-based
 (virtual sensors).
\end_layout

\begin_layout Standard
Hardware-based sensors are built into the device and they derive data by
 directly measuring specific environmental properties, while software-based
 sensors are not physical devices despite they mimic an hardware-based sensor.
 This second group derive their data from one ore more of the hardware-based
 sensors.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sensor types supported by the Android platform
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="30col%">
<column alignment="left" valignment="middle" width="10text%">
<column alignment="left" valignment="middle" width="30text%">
<column alignment="left" valignment="middle" width="20text%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
rowcolor{cyan}
\end_layout

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\series bold
Sensor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\series bold
Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\series bold
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\series bold
Sensor fusion
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_ACCELEROMETER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Hardware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures the acceleration force in 
\begin_inset Formula $\nicefrac{m}{s^{2}}$
\end_inset

 that is applied to a device on all three physical axes (x, y, and z), including
 the force of gravity.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_GRAVITY
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Software or Hardware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures the force of gravity in 
\begin_inset Formula $\nicefrac{m}{s^{2}}$
\end_inset

 that is applied to a device on all three physical axes (x, y, and z).
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
If it is software uses Accelerometer to derive data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_GYROSCOPE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Hardware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures a device's rate of rotation in 
\begin_inset Formula $\nicefrac{rad}{s}$
\end_inset

 that is applied to a device on all three physical axes (x, y, and z).
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_LINEAR_ACCELERATION
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Software
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures the acceleration force in 
\begin_inset Formula $\nicefrac{m}{s^{2}}$
\end_inset

 that is applied to a device on all three physical axes (x, y, and z), excluding
 the force of gravity.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize

\size footnotesize
Acceleromter
\end_layout

\begin_layout Itemize

\size footnotesize
Gravity sensor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_ORIENTATION
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Software
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures degrees of rotation that a device makes around all three physical
 axes (x, y, z).
 As of API level 3 you can obtain the inclination matrix and rotation matrix
 for a device by using the gravity sensor and the geomagnetic field sensor
 in conjunction with the getRotationMatrix() method.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize

\size footnotesize
Accelerometer
\end_layout

\begin_layout Itemize

\size footnotesize
Geomagnetic field
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_ROTATION_VECTOR
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Software or Hardware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures the orientation of a device by providing the three elements of
 the device's rotation vector.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
If it is software uses Gyroscope to derive data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_AMBIENT_TEMPERATURE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Hardware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures the ambient room temperature in degrees Celsius (
\begin_inset Formula $\text{°C}$
\end_inset

).
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_LIGHT
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Hardware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures the ambient illumination in lx.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_PRESSURE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Hardware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures the ambient air pressure in 
\begin_inset Formula $hPa$
\end_inset

 or 
\begin_inset Formula $mbar$
\end_inset

.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_RELATIVE_HUMIDITY
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Hardware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures the ambient humidity in percent (
\begin_inset Formula $\%$
\end_inset

).
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_TEMPERATURE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Hardware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures the temperature of the device in degree Celsius (
\begin_inset Formula $\text{°C}$
\end_inset

).
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_MAGNETIC_FIELD
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Hardware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures the ambient geomagnetic field for all three physical axes (x, y,
 z) in 
\begin_inset Formula $\mu T$
\end_inset

.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_PROXIMITY
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Hardware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measures the proximity of an object in cm relative to the view screen of
 a device.
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Android sensor framework
\end_layout

\begin_layout Standard
Android sensor framework is part of the 
\family typewriter
android.hardware
\family default
 package.
 This subsystem includes the interface, named sensor Hardware Abstraction
 Layer (sensor HAL), between the hardware driver and the other framework
 classes and interfaces which allows developers to
\end_layout

\begin_layout Itemize
Indentify sensors and sensor capabilities
\begin_inset Newline newline
\end_inset

useful for application with features that needs a specific sensor type or
 capabilities (identify all sensors that are present on a device and disable
 features that rely on sensors not present)
\end_layout

\begin_layout Itemize
Monitor sensor events
\begin_inset Newline newline
\end_inset

raw sensors data acquisition.
 Every time a sensor detects a change (normally every x nanoseconds, with
 x defined by one of 
\family typewriter
SENSOR_DELAY_*
\family default
 value) in the parameter that is measuring, notify this change using a sensor
 event that provides four different informations:
\end_layout

\begin_deeper
\begin_layout Itemize
Name of the sensor that triggered the event
\end_layout

\begin_layout Itemize
Timestamp of the event in nanoseconds
\begin_inset Foot
status open

\begin_layout Plain Layout
An Android Project Member says: 
\begin_inset Quotes eld
\end_inset

[...]The timestamps are not defined as being the Unix time; they're just "a
 time" that's only valid for a given sensor.
 [...]
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "TimeStamp"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Accuracy of the event
\end_layout

\begin_layout Itemize
Raw data that triggered the event
\end_layout

\end_deeper
\begin_layout Standard
This tasks can be performed using the sensor-related APIs introduced by
 classes and interfaces included in Android sensor framework:
\end_layout

\begin_layout Description

\family typewriter
\color black
SensorManager
\family default
 
\color inherit
This class creates an instance of the sensor service and provides methods
 to access and listens sensors, register and un register sensor listeners,
 acquire device orientation informations and also defines several sensors
 constants useful to report sensor accuracy, set data acquisition rates,
 and calibrate sensors.
\end_layout

\begin_layout Description

\family typewriter
\color black
Sensor
\family default
 This class is useful to create an instance of a specific sensor and provides
 various methods that determine sensor's capabilities.
\end_layout

\begin_layout Description

\family typewriter
\color black
SensorEvent
\family default
 Android uses this class to create a sensor event object which provides
 sensor event's informations such as raw sensor data, sensor type that generated
 the event, event accuracy and time stamp.
\end_layout

\begin_layout Description

\family typewriter
\color black
SensorEventListener
\family default
 
\color inherit
This interface is useful to create two callback methods that receive notificatio
n (a sensor event) when sensor values or sensor accuracy change.
\end_layout

\begin_layout Subsection
Sensor availability
\end_layout

\begin_layout Standard
Sensors availability is different within devices and is different too among
 Android versions because the Android sensors have been introduced in different
 platmorm releases.
\end_layout

\begin_layout Standard
Many sensors have been introduced by Android 1.5 Cupcake (API Level 3), but
 some were not implemented and not available until Android 2.3 Gingerbread
 (API Level 9) that introduces too new sensors.
 Other sensors were introduced by Android 4.0 Ice Cream Sandwich (API Level
 14) that also deprecates two sensors, replaced by newer and better sensors.
\end_layout

\begin_layout Standard
The following table summarize the availability of each sensor in each Android
 release.
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sensor types supported by the Android platform
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="30col%">
<column alignment="left" valignment="middle" width="14text%">
<column alignment="left" valignment="middle" width="14text%">
<column alignment="left" valignment="middle" width="14text%">
<column alignment="left" valignment="middle" width="14text%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
rowcolor{cyan}
\end_layout

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\series bold
Sensor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\series bold
Android 4 
\end_layout

\begin_layout Plain Layout

\series bold
Ice Cream Sandwich
\end_layout

\begin_layout Plain Layout
(API Level 14)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\series bold
Android 2.3
\end_layout

\begin_layout Plain Layout

\series bold
Gingerbread
\end_layout

\begin_layout Plain Layout
(API Level 9)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\series bold
Android 2.2 
\end_layout

\begin_layout Plain Layout

\series bold
Froyo
\end_layout

\begin_layout Plain Layout
(API Level 8)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\series bold
Android 1.5
\end_layout

\begin_layout Plain Layout

\series bold
Cupcake
\end_layout

\begin_layout Plain Layout
(API Level 3)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_ACCELEROMETER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_GRAVITY
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_GYROSCOPE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Added in Android 1.5 (API Level 3), but not available untin Android 2.3 (API
 Level 9).
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\begin_inset script superscript

\begin_layout Plain Layout
a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_LINEAR_ACCELERATION
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_ORIENTATION
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Sensor available but deprecated
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\begin_inset script superscript

\begin_layout Plain Layout
b
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\begin_inset script superscript

\begin_layout Plain Layout
b
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_ROTATION_VECTOR
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_AMBIENT_TEMPERATURE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_LIGHT
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_PRESSURE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\begin_inset script superscript

\begin_layout Plain Layout
a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\begin_inset script superscript

\begin_layout Plain Layout
a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_RELATIVE_HUMIDITY
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_TEMPERATURE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\begin_inset script superscript

\begin_layout Plain Layout
b
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_MAGNETIC_FIELD
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_PROXIMITY
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YES
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
Sensor coordinate system
\end_layout

\begin_layout Standard

\color black
Generally the sensor framework uses a standard 3-axis coordinate system
 to express data values.
\end_layout

\begin_layout Standard

\color black
X, Y and Z values are represented respectively by 
\family typewriter
values[0]
\family default
, 
\family typewriter
values[1]
\family default
 and 
\family typewriter
values[2]
\family default
 of 
\family typewriter
\size small
SensorEvent
\family default
\size default
 object.
 Some sensors, such as proximity sensor, light sensor, pressure sensor and
 temperature sensor, provides single values represented by the only 
\family typewriter
values[0]
\family default
.
\end_layout

\begin_layout Standard

\color black
For 
\family typewriter
TYPE_ACCELEROMETER
\family default
, 
\family typewriter
TYPE_GRAVITY
\family default
, 
\family typewriter
TYPE_GYROSCOPE
\family default
, 
\family typewriter
TYPE_LINEAR_ACCELERATION
\family default
 and 
\family typewriter
TYPE_MAGNETIC_FIELD
\family default
 the sensors the coordinate system is defined relatively to the device's
 screen when the device in held in its default orientation (portrait for
 smartphones, landscape for many tablet).
 When the device is in its default orientation the X axis is horizontal
 and points to the right, the Y axis is vertical and points up and the Z
 axis points toward the outside of the screen face.
\end_layout

\begin_layout Standard

\color black
The most important thing to understand is that the axes are not swapped
 when the device screen orientation changes.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sensor coordinate system
\begin_inset CommandInset citation
LatexCommand cite
key "intelDev"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sensor coordinate system for smartphone
\end_layout

\end_inset


\begin_inset Graphics
	filename img/SensorCoordinateSystemSmartphone.png
	lyxscale 30
	width 30page%

\end_inset


\end_layout

\end_inset


\begin_inset space \hspace{}
\length 5page%
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sensor coordinate system for tablet
\end_layout

\end_inset


\begin_inset Graphics
	filename img/SensorCoordinateSystemTablet.png
	lyxscale 30
	width 30page%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\color black
Identifying sensors and sensor capabilities
\end_layout

\begin_layout Standard

\color black
The Android sensor framework provides several methods that make it easy
 determine at runtime which sensors are on a device and the capabilities
 of each sensor, such as maximum range, resolution, power requirements,
 minimum delay and vendor.
\end_layout

\begin_layout Standard

\color black
First of all, to identify the sensors on a device, is necessary to obtain
 a reference to the sensor service by creating an instance of the 
\family typewriter
\size small
SensorManager
\family default
\size default
 class by calling the 
\family typewriter
getSystemService()
\family default
 method using the 
\family typewriter
SENSOR_SERVICE
\family default
 as parameter:
\end_layout

\begin_layout Standard
\align center

\color black
\begin_inset Box ovalbox
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "77page%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout LyX-Code

\color black
\begin_inset listings
lstparams "basicstyle={\footnotesize\sffamily},comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,morecomment={[s]{/*}{*/}},ndkeywords={class, export, throw, implements, import, this},ndkeywordstyle={\color{darkgray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout LyX-Code

private SensorManager mSensorManager;
\end_layout

\begin_layout LyX-Code

mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\color black
Now, calling the
\family typewriter
\series bold
 
\series default
getSensorList()
\family default
 method and using 
\family typewriter
TYPE_ALL
\family default
 constant as parameter, 
\family typewriter
\size small
SensorManager
\family default
\size default
 returns the list of every sensor on the device:
\end_layout

\begin_layout Standard
\align center

\color black
\begin_inset Box ovalbox
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "77page%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout LyX-Code

\color black
\begin_inset listings
lstparams "basicstyle={\footnotesize\sffamily},comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,morecomment={[s]{/*}{*/}},ndkeywords={class, export, throw, implements, import, this},ndkeywordstyle={\color{darkgray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout LyX-Code

List<Sensor> deviceSensors = mSensorManager.getSensorList(Sensor.TYPE_ALL);
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\color black
Using, instead of 
\family typewriter
TYPE_ALL
\family default
 constant, another constant provided by 
\family typewriter
\size small
Sensor
\family default
\size default
 class such as 
\family typewriter
TYPE_GYROSCOPE
\family default
, 
\family typewriter
TYPE_LINEAR_ACCELERATION
\family default
, 
\family typewriter
TYPE_GRAVITY
\family default
 etc.
 
\family typewriter
\size small
SensorManager
\family default
\size default
 class returns a lists all sensors of the given type.
\end_layout

\begin_layout Standard

\color black
Is also possible determine if a specific type of sensor exists on a device
 by using the 
\family typewriter
getDefaultSensor()
\family default
 method with the sensor type constant as parameter.
 If a device has more then one sensor for the given type, one of its must
 be designed as the default sensor and if the default sensor does not exist,
 the method returns null (which means that the device does not have thay
 type of sensor).
 The following code checks if there is an accelerometer on the device:
\end_layout

\begin_layout Standard
\align center
\begin_inset Box ovalbox
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "77page%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout LyX-Code
\begin_inset listings
lstparams "basicstyle={\footnotesize\sffamily},comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, Sensor, SensorManager, Context},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,morecomment={[s]{/*}{*/}},ndkeywords={class, export, throw, implements, import, this},ndkeywordstyle={\color{darkgray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout LyX-Code

private SensorManager mSensorManager;
\end_layout

\begin_layout LyX-Code

...
\end_layout

\begin_layout LyX-Code

mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
\end_layout

\begin_layout LyX-Code

if ( mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) != null )
 {
\end_layout

\begin_layout LyX-Code

	// Success! There's an accelerometer.
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

else{
\end_layout

\begin_layout LyX-Code

	// Failure! No accelerometer.
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center

\end_layout

\begin_layout Standard
In addition to listing the sensors on a device, in possible, using public
 methods of Sensor class, determine capabilities and attributes of each
 sensor.
 This is useful if an application can have different behavior depending
 on sensors, or sensor capabilities, available on a device.
 With this methods is possible to obtain sensor's resolution and maximum
 range of measurement (using 
\family typewriter
getResolution()
\family default
 and 
\family typewriter
getMaximumRange()
\family default
) or sensor's power requirement with 
\family typewriter
getPower()
\family default
 method; other two methods particularly useful to optimize an application
 for different manufacturers' sensors or different sensors' version are
\family typewriter
 getVendor()
\family default
 -for the manufacturer- and 
\family typewriter
getVersion()
\family default
 -to obtain sensor's version-.
\end_layout

\begin_layout Standard
The following sample code shows how to use 
\family typewriter
getVendor()
\family default
 and 
\family typewriter
getVersion()
\family default
 methods to optimize an application using gravity sensor if its vendor is
 
\shape slanted
Google Inc.

\shape default
 and its version is 
\shape slanted
3
\shape default
, if that particular sensor is not present on device the application try
 to use the accelerometer:
\end_layout

\begin_layout Standard
Another useful methods is the 
\family typewriter
getMinDelay()
\family default
 which returns the minimum time interval (in microseconds) between two data
 sensed by a sensor.
 Any sensor that returns a 
\shape italic
non-zero
\shape default
 value is a streaming sensor -this type of sensors sense data at regular
 intervals and were introduced by Android 2.3 Gingerbread (API Level 9)-
 while if a sensor returns zero, it means that the sensor is not streaming
 sensor, and it reports data only when there is a chenge in the paremeter
 it is sensing.
 This method is useful because using it in possible to determine the maximum
 rate at which a sensor can acquire data.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Paragraph
Sensors identification code
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This app is available on github in AboutSensors project
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following code realize an Android application that lists all sensors
 in a device and its own properties.
 Some methods were not introduced until API Level 9, so it works on Android
 2.3 (Gingerbread) or latest.
\end_layout

\begin_layout Standard
The layout file (
\family typewriter
\color black
res/layout/activity_about_sensors.xml
\family default
\color inherit
) defines the Android widgets used, their ID and their properties (position,
 dimensions, alignment, etc.).
 In this application is needed a 
\family typewriter
\color black
Spinner
\family default
\color inherit
 to select which is the sensor to be inspected and a 
\family typewriter
\color black
TableLayout
\family default
\color inherit
 that contains a row for each property and every row contains two 
\family typewriter
\color black
TextView
\family default
\color inherit
 (a label and a value field).
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
activity_about_sensors.xml
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\sffamily},breaklines=true,language=XML,lastline=67,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<?xml version="1.0" encoding="utf-8"?>
\end_layout

\begin_layout Plain Layout

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
\end_layout

\begin_layout Plain Layout

    android:layout_width="match_parent"
\end_layout

\begin_layout Plain Layout

    android:layout_height="match_parent" >
\end_layout

\begin_layout Plain Layout

    <Spinner
\end_layout

\begin_layout Plain Layout

        android:id="@+id/spinner_sensors"
\end_layout

\begin_layout Plain Layout

        android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

        android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

        android:layout_alignParentLeft="true"
\end_layout

\begin_layout Plain Layout

        android:layout_alignParentTop="true" />
\end_layout

\begin_layout Plain Layout

    <TableLayout
\end_layout

\begin_layout Plain Layout

        android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

        android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

        android:layout_alignParentLeft="true"
\end_layout

\begin_layout Plain Layout

        android:layout_alignParentRight="true"
\end_layout

\begin_layout Plain Layout

        android:layout_below="@+id/spinner_sensors" >
\end_layout

\begin_layout Plain Layout

        <TableRow
\end_layout

\begin_layout Plain Layout

            android:id="@+id/tableRowVersion"
\end_layout

\begin_layout Plain Layout

            android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

            android:layout_height="wrap_content" >
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

               android:id="@+id/labelVersion"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text="Version: "
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/valueVersion"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text=""
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

        </TableRow>
\end_layout

\begin_layout Plain Layout

        <TableRow
\end_layout

\begin_layout Plain Layout

            android:id="@+id/tableRowVendor"
\end_layout

\begin_layout Plain Layout

            android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

            android:layout_height="wrap_content" >
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/labelVendor"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text="Vendor: "
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/valueVendor"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text=""
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

        </TableRow>
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\sffamily},breaklines=true,language=XML,tabsize=4"
inline false
status open

\begin_layout Plain Layout

    	<TableRow
\end_layout

\begin_layout Plain Layout

            android:id="@+id/tableRowPower"
\end_layout

\begin_layout Plain Layout

            android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

            android:layout_height="wrap_content" >
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/labelPower"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text="Power: "
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/valuePower"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text=""
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

        </TableRow>    
\end_layout

\begin_layout Plain Layout

		<TableRow
\end_layout

\begin_layout Plain Layout

            android:id="@+id/tableRowMaxRange"
\end_layout

\begin_layout Plain Layout

            android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

            android:layout_height="wrap_content" >
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/labelMaxRange"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text="Maximum Range: "
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/valueMaxRange"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text=""
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

        </TableRow>
\end_layout

\begin_layout Plain Layout

        <TableRow
\end_layout

\begin_layout Plain Layout

            android:id="@+id/tableRowResolution"
\end_layout

\begin_layout Plain Layout

            android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

            android:layout_height="wrap_content" >
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/labelResolution"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text="Resolution: "
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/valueResolution"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text=""
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

        </TableRow>
\end_layout

\begin_layout Plain Layout

        <TableRow
\end_layout

\begin_layout Plain Layout

            android:id="@+id/tableRowMinDelay"
\end_layout

\begin_layout Plain Layout

            android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

            android:layout_height="wrap_content" >
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/labelMinDelay"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text="Minimum Delay: "
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/valueMinDelay"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text=""
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

        </TableRow>
\end_layout

\begin_layout Plain Layout

   </TableLayout>
\end_layout

\begin_layout Plain Layout

</RelativeLayout> 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
The activity code is really simple: when Android system creates the activity
 (
\family typewriter
onCreate()
\family default
 method), the first thing to do is the initialization of resources.
 The 
\family typewriter
initializeResources()
\family default
 method assigns to each field its resource referenced in layout file, creates
 the 
\family typewriter
Spinner
\family default
's 
\family typewriter
ArrayAdapter
\family default
 with sensors' names and call the 
\family typewriter
addSpinnerListener()
\family default
 method that assigns to the 
\family typewriter
Spinner
\family default
 a new 
\family typewriter
onItemSelectedListener
\family default
 that changes the shown values with the sensor selected values.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AboutSensors.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.aboutSensors;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import java.util.ArrayList;
\end_layout

\begin_layout Plain Layout

import java.util.List;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import android.app.Activity;
\end_layout

\begin_layout Plain Layout

import android.hardware.Sensor;
\end_layout

\begin_layout Plain Layout

import android.hardware.SensorManager;
\end_layout

\begin_layout Plain Layout

import android.os.Bundle;
\end_layout

\begin_layout Plain Layout

import android.view.View;
\end_layout

\begin_layout Plain Layout

import android.widget.AdapterView;
\end_layout

\begin_layout Plain Layout

import android.widget.AdapterView.OnItemSelectedListener;
\end_layout

\begin_layout Plain Layout

import android.widget.ArrayAdapter;
\end_layout

\begin_layout Plain Layout

import android.widget.Spinner;
\end_layout

\begin_layout Plain Layout

import android.widget.TextView;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class AboutSensors extends Activity {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//fields definition
\end_layout

\begin_layout Plain Layout

	private Spinner spinnerList;
\end_layout

\begin_layout Plain Layout

	private SensorManager manager;
\end_layout

\begin_layout Plain Layout

	private List<Sensor> sensors;
\end_layout

\begin_layout Plain Layout

	private Sensor sensorSelected;
\end_layout

\begin_layout Plain Layout

	private ArrayAdapter<String> adapter;
\end_layout

\begin_layout Plain Layout

	private TextView textVersion;
\end_layout

\begin_layout Plain Layout

	private TextView textVendor;
\end_layout

\begin_layout Plain Layout

	private TextView textPower;
\end_layout

\begin_layout Plain Layout

	private TextView textMaxRange;
\end_layout

\begin_layout Plain Layout

	private TextView textResolution;
\end_layout

\begin_layout Plain Layout

	private TextView textMinDelay;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	protected void onCreate(Bundle savedInstanceState) {
\end_layout

\begin_layout Plain Layout

		super.onCreate(savedInstanceState);
\end_layout

\begin_layout Plain Layout

		//set the default layout
\end_layout

\begin_layout Plain Layout

		setContentView(R.layout.activity_about_sensors);
\end_layout

\begin_layout Plain Layout

		//initialize the resources
\end_layout

\begin_layout Plain Layout

		initializeResources();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	private void initializeResources() {
\end_layout

\begin_layout Plain Layout

		//obtain the SensorManager instance and get the sensors list
\end_layout

\begin_layout Plain Layout

		manager = (SensorManager) getSystemService(SENSOR_SERVICE);
\end_layout

\begin_layout Plain Layout

		sensors = manager.getSensorList(Sensor.TYPE_ALL);
\end_layout

\begin_layout Plain Layout

		//get the TextView where put the sensor information
\end_layout

\begin_layout Plain Layout

		textVersion = (TextView)findViewById(R.id.valueVersion);
\end_layout

\begin_layout Plain Layout

		textVendor = (TextView)findViewById(R.id.valueVendor);
\end_layout

\begin_layout Plain Layout

		textPower = (TextView)findViewById(R.id.valuePower);
\end_layout

\begin_layout Plain Layout

		textMaxRange = (TextView)findViewById(R.id.valueMaxRange);
\end_layout

\begin_layout Plain Layout

		textResolution = (TextView)findViewById(R.id.valueResolution);
\end_layout

\begin_layout Plain Layout

		textMinDelay = (TextView)findViewById(R.id.valueMinDelay);
\end_layout

\begin_layout Plain Layout

		//get the spinner
\end_layout

\begin_layout Plain Layout

		spinnerList = (Spinner)findViewById(R.id.spinner_sensors);
\end_layout

\begin_layout Plain Layout

		//set up the spinner adapter with sensors names
\end_layout

\begin_layout Plain Layout

		adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item,
 
\end_layout

\begin_layout Plain Layout

											getSensorsNames());
\end_layout

\begin_layout Plain Layout

		adapter.setDropDownViewResource(android.R.layout.simple_dropdown_item_1line);
\end_layout

\begin_layout Plain Layout

		spinnerList.setAdapter(adapter);
\end_layout

\begin_layout Plain Layout

		//add the spinner listener
\end_layout

\begin_layout Plain Layout

		addSpinnerListener(); 		
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

	private void addSpinnerListener() {
\end_layout

\begin_layout Plain Layout

		spinnerList.setOnItemSelectedListener(new OnItemSelectedListener(){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		@Override
\end_layout

\begin_layout Plain Layout

			public void onItemSelected(AdapterView<?> parent, View view, 
\end_layout

\begin_layout Plain Layout

										int position, long id) {
\end_layout

\begin_layout Plain Layout

				//when an item is selected update the text view 
\end_layout

\begin_layout Plain Layout

				//with the selected sensor's informations
\end_layout

\begin_layout Plain Layout

				Sensor s = sensors.get(position);
\end_layout

\begin_layout Plain Layout

				if(s != sensorSelected){
\end_layout

\begin_layout Plain Layout

					System.out.println(s.toString());
\end_layout

\begin_layout Plain Layout

					textVersion.setText(""+s.getVersion());
\end_layout

\begin_layout Plain Layout

					textVendor.setText(""+s.getVendor());
\end_layout

\begin_layout Plain Layout

					textPower.setText(s.getPower()+" mA");
\end_layout

\begin_layout Plain Layout

					textMaxRange.setText(""+s.getMaximumRange());
\end_layout

\begin_layout Plain Layout

					textResolution.setText(""+s.getResolution());
\end_layout

\begin_layout Plain Layout

					textMinDelay.setText(s.getMinDelay()/1000+" ms");
\end_layout

\begin_layout Plain Layout

					sensorSelected = s;
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			@Override
\end_layout

\begin_layout Plain Layout

			public void onNothingSelected(AdapterView<?> parent) {
\end_layout

\begin_layout Plain Layout

				textVersion.setText(""); 
\end_layout

\begin_layout Plain Layout

				textVendor.setText("");
\end_layout

\begin_layout Plain Layout

			}		
\end_layout

\begin_layout Plain Layout

		});
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	private List<String> getSensorsNames() {
\end_layout

\begin_layout Plain Layout

		//returns the list that contains the names of all available sensors
\end_layout

\begin_layout Plain Layout

		List<String> sensorNames = new ArrayList<String>();
\end_layout

\begin_layout Plain Layout

		for (Sensor s: sensors)
\end_layout

\begin_layout Plain Layout

			sensorNames.add(s.getName());
\end_layout

\begin_layout Plain Layout

		return sensorNames;
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Monitoring sensor events
\end_layout

\begin_layout Standard
SensorEventListener interface introduces two callback methods which must
 be implemented to monitor raw sensor data.
 This methods are 
\family typewriter
onAccuracyChanged()
\family default
 and 
\family typewriter
onSensorChanged()
\family default
.
\end_layout

\begin_layout Standard
This two methods are invoked by Android system, the first whenever the sensor's
 accuracy changes (this method provides the reference to the 
\family typewriter
Sensor
\family default
 object that changed and its new accuracy, whose state is represented by
 one of four constants defined in 
\family typewriter
SensorManager
\family default
 class:
\end_layout

\begin_layout Itemize

\family typewriter
SENSOR_STATUS_ACCURACY_LOW
\end_layout

\begin_layout Itemize

\family typewriter
SENSOR_STATUS_ACCURACY_MEDIUM
\end_layout

\begin_layout Itemize

\family typewriter
SENSOR_STATUS_ACCURACY_HIGH
\end_layout

\begin_layout Itemize

\family typewriter
SENSOR_STATUS_ACCURACY_UNRELIABLE
\end_layout

\begin_layout Standard
The 
\family typewriter
onSensorChanged()
\family default
 method, insted, is invoked by system when a sensor reports a new value.
 This method provides a new 
\family typewriter
SensorEvent
\family default
 object that contains informations about the new sensor data (the new data
 recorded by the sensor, its accuracy, the sensor which generates the new
 data and the relative timestamp).
\end_layout

\begin_layout Paragraph
Sensor events code
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This app is available on github in the project AboutSensorEvents
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following code is based on AboutSensors project.
 In this application is shown, with the previous informations, the raw sensor
 data, received by the selected sensor.
\end_layout

\begin_layout Standard
In layout file (
\family typewriter
\color black
res/layout/activity_about_sensor_events.xml
\family default
\color inherit
) above the sensor informations table is defined a new table that contains
 3 rows with 3 labels and 3 
\family typewriter
TextView
\family default
, one for each axes value (X, Y and Z).
 The following code shown only the difference between the previous and the
 new layout.
 
\end_layout

\begin_layout Standard
This part of code begins after the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},language=XML"
inline true
status open

\begin_layout Plain Layout

</TableLayout>
\end_layout

\end_inset

 tag.
\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
activity_about_sensor_events.xml
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\sffamily},breaklines=true,language=XML,lastline=67,tabsize=4"
inline false
status open

\begin_layout Plain Layout

    <TextView
\end_layout

\begin_layout Plain Layout

        android:id="@+id/LabelSensorData"
\end_layout

\begin_layout Plain Layout

        android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

        android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

        android:layout_alignParentLeft="false"
\end_layout

\begin_layout Plain Layout

        android:layout_alignParentRight="false"
\end_layout

\begin_layout Plain Layout

        android:layout_below="@+id/tableLayout1"
\end_layout

\begin_layout Plain Layout

        android:layout_centerHorizontal="true"
\end_layout

\begin_layout Plain Layout

        android:text="Sensor Data:"
\end_layout

\begin_layout Plain Layout

        android:textAppearance="?android:attr/textAppearanceLarge" />
\end_layout

\begin_layout Plain Layout

    <TableLayout
\end_layout

\begin_layout Plain Layout

        android:id="@+id/SensorData"
\end_layout

\begin_layout Plain Layout

        android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

        android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

        android:layout_alignParentLeft="true"
\end_layout

\begin_layout Plain Layout

        android:layout_alignParentRight="true"
\end_layout

\begin_layout Plain Layout

        android:layout_below="@+id/LabelSensorData" >
\end_layout

\begin_layout Plain Layout

        <TableRow
\end_layout

\begin_layout Plain Layout

            android:id="@+id/SensorDataX"
\end_layout

\begin_layout Plain Layout

            android:layout_width="wrap_content" 
\end_layout

\begin_layout Plain Layout

            android:layout_height="wrap_content" >
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/LabelDataX"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text="SensorDataX: "
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/ValueDataX"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

        </TableRow>
\end_layout

\begin_layout Plain Layout

		<TableRow
\end_layout

\begin_layout Plain Layout

            android:id="@+id/SensorDataY"
\end_layout

\begin_layout Plain Layout

            android:layout_width="wrap_content" 
\end_layout

\begin_layout Plain Layout

            android:layout_height="wrap_content" >
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/LabelDataY"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text="SensorDataY: "
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/ValueDataY"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

        </TableRow>
\end_layout

\begin_layout Plain Layout

		<TableRow
\end_layout

\begin_layout Plain Layout

            android:id="@+id/SensorDataZ"
\end_layout

\begin_layout Plain Layout

            android:layout_width="wrap_content" 
\end_layout

\begin_layout Plain Layout

            android:layout_height="wrap_content" >
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/LabelDataZ"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:text="SensorDataZ: "
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/ValueDataZ"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:textAppearance="?android:attr/textAppearanceMedium"
 />
\end_layout

\begin_layout Plain Layout

        </TableRow>
\end_layout

\begin_layout Plain Layout

	</TableLayout>
\end_layout

\begin_layout Plain Layout

</RelativeLayout>
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset

The activity, like the 
\family typewriter
AboutSensor
\family default
 application, changes sensors information when a new sensor is selected
 from 
\family typewriter
Spinner
\family default
 and shows, in addition to sensor informations, the sensor row data updated
 by the sensor event listener, in fact, the 
\family typewriter
SpinnerListener
\family default
, by 
\family typewriter
onItemSelected
\family default
 method, changes the 
\family typewriter
SensorEventsListener
\family default
 calling the 
\family typewriter
updateSensorListener
\family default
 method, which removes old listener from previous selected sensor and attaches
 to the new selected sensor a new listener.
 This method is called too when the application is resumed (
\family typewriter
onResume()
\family default
 method), and, when the application is paused (
\family typewriter
onPause()
\family default
 method) the sensor listener is detached from sensor.
\end_layout

\begin_layout Standard
The 
\family typewriter
SensorEventsListener
\family default
 class extends 
\family typewriter
SensorEventListener
\family default
 interface the defines
\end_layout

\begin_layout Itemize

\family typewriter
onSensorChanged
\family default
 method that updates the sensor data's text views
\end_layout

\begin_layout Itemize

\family typewriter
onAccuracyChanged
\family default
 that, in this case, does nothing
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AboutSensorEvents.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.aboutSensorEvents;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import java.util.ArrayList;
\end_layout

\begin_layout Plain Layout

import java.util.List;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import android.app.Activity;
\end_layout

\begin_layout Plain Layout

import android.hardware.Sensor;
\end_layout

\begin_layout Plain Layout

import android.hardware.SensorEvent;
\end_layout

\begin_layout Plain Layout

import android.hardware.SensorEventListener;
\end_layout

\begin_layout Plain Layout

import android.hardware.SensorManager;
\end_layout

\begin_layout Plain Layout

import android.os.Bundle;
\end_layout

\begin_layout Plain Layout

import android.view.View;
\end_layout

\begin_layout Plain Layout

import android.widget.AdapterView;
\end_layout

\begin_layout Plain Layout

import android.widget.AdapterView.OnItemSelectedListener;
\end_layout

\begin_layout Plain Layout

import android.widget.ArrayAdapter;
\end_layout

\begin_layout Plain Layout

import android.widget.Spinner;
\end_layout

\begin_layout Plain Layout

import android.widget.TextView;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class AboutSensorEvents extends Activity {
\end_layout

\begin_layout Plain Layout

	//fields definition
\end_layout

\begin_layout Plain Layout

	private Spinner spinnerList;
\end_layout

\begin_layout Plain Layout

	private SensorManager manager;
\end_layout

\begin_layout Plain Layout

	private List<Sensor> sensors;
\end_layout

\begin_layout Plain Layout

	private Sensor sensorSelected;
\end_layout

\begin_layout Plain Layout

	private ArrayAdapter<String> adapter;
\end_layout

\begin_layout Plain Layout

	private TextView textVersion;
\end_layout

\begin_layout Plain Layout

	private TextView textVendor;
\end_layout

\begin_layout Plain Layout

	private TextView textPower;
\end_layout

\begin_layout Plain Layout

	private TextView textMaxRange;
\end_layout

\begin_layout Plain Layout

	private TextView textResolution;
\end_layout

\begin_layout Plain Layout

	private TextView textMinDelay;
\end_layout

\begin_layout Plain Layout

	private SensorEventListener listener;
\end_layout

\begin_layout Plain Layout

	private TextView textX;
\end_layout

\begin_layout Plain Layout

	private TextView textY;
\end_layout

\begin_layout Plain Layout

	private TextView textZ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	protected void onCreate(Bundle savedInstanceState) {
\end_layout

\begin_layout Plain Layout

		super.onCreate(savedInstanceState);
\end_layout

\begin_layout Plain Layout

		//set the default layout
\end_layout

\begin_layout Plain Layout

		setContentView(R.layout.activity_about_sensor_events);
\end_layout

\begin_layout Plain Layout

		//initialize the resources
\end_layout

\begin_layout Plain Layout

		initializeResources();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	protected void onResume() {
\end_layout

\begin_layout Plain Layout

		super.onResume();
\end_layout

\begin_layout Plain Layout

		manager.registerListener(listener, sensorSelected, SensorManager.SENSOR_DELAY_NO
RMAL);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	protected void onPause() {
\end_layout

\begin_layout Plain Layout

		super.onPause();
\end_layout

\begin_layout Plain Layout

		manager.unregisterListener(listener, sensorSelected);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

	private void initializeResources() {
\end_layout

\begin_layout Plain Layout

		//obtain the SensorManager instance and get the sensors list
\end_layout

\begin_layout Plain Layout

		manager = (SensorManager) getSystemService(SENSOR_SERVICE);
\end_layout

\begin_layout Plain Layout

		sensors = manager.getSensorList(Sensor.TYPE_ALL);
\end_layout

\begin_layout Plain Layout

		//get the TextView where put the sensor information
\end_layout

\begin_layout Plain Layout

		textVersion = (TextView)findViewById(R.id.valueVersion);
\end_layout

\begin_layout Plain Layout

		textVendor = (TextView)findViewById(R.id.valueVendor);
\end_layout

\begin_layout Plain Layout

		textPower = (TextView)findViewById(R.id.valuePower);
\end_layout

\begin_layout Plain Layout

		textMaxRange = (TextView)findViewById(R.id.valueMaxRange);
\end_layout

\begin_layout Plain Layout

		textResolution = (TextView)findViewById(R.id.valueResolution);
\end_layout

\begin_layout Plain Layout

		textMinDelay = (TextView)findViewById(R.id.valueMinDelay);
\end_layout

\begin_layout Plain Layout

		//get the TextView where put sensor raw data received
\end_layout

\begin_layout Plain Layout

		textX = (TextView)findViewById(R.id.ValueDataX);
\end_layout

\begin_layout Plain Layout

		textY = (TextView)findViewById(R.id.ValueDataY);
\end_layout

\begin_layout Plain Layout

		textZ = (TextView)findViewById(R.id.ValueDataZ);
\end_layout

\begin_layout Plain Layout

		//get the spinner
\end_layout

\begin_layout Plain Layout

		spinnerList = (Spinner)findViewById(R.id.spinner_sensors);
\end_layout

\begin_layout Plain Layout

		//set up the spinner adapter with sensors names
\end_layout

\begin_layout Plain Layout

		adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item,
\end_layout

\begin_layout Plain Layout

											getSensorsNames());
\end_layout

\begin_layout Plain Layout

		adapter.setDropDownViewResource(android.R.layout.simple_dropdown_item_1line);
\end_layout

\begin_layout Plain Layout

		spinnerList.setAdapter(adapter);
\end_layout

\begin_layout Plain Layout

		//add the spinner listener
\end_layout

\begin_layout Plain Layout

		addSpinnerListener();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	private void updateSensorListener() {
\end_layout

\begin_layout Plain Layout

		//if exist a defined listener remove it from sensor
\end_layout

\begin_layout Plain Layout

		if(listener!=null)
\end_layout

\begin_layout Plain Layout

			manager.unregisterListener(listener, sensorSelected);
\end_layout

\begin_layout Plain Layout

		//register new listener
\end_layout

\begin_layout Plain Layout

		listener = new SensorEventsListener();
\end_layout

\begin_layout Plain Layout

		manager.registerListener(listener,
\end_layout

\begin_layout Plain Layout

								sensors.get(spinnerList.getSelectedItemPosition()),
\end_layout

\begin_layout Plain Layout

								SensorManager.SENSOR_DELAY_NORMAL);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	private void addSpinnerListener() {
\end_layout

\begin_layout Plain Layout

		spinnerList.setOnItemSelectedListener(new OnItemSelectedListener(){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		@Override
\end_layout

\begin_layout Plain Layout

			public void onItemSelected(AdapterView<?> parent, View view, 
\end_layout

\begin_layout Plain Layout

										int position, long id) {
\end_layout

\begin_layout Plain Layout

				//when an item is selected update the text view 
\end_layout

\begin_layout Plain Layout

				//with the selected sensor's informations
\end_layout

\begin_layout Plain Layout

				Sensor s = sensors.get(position);
\end_layout

\begin_layout Plain Layout

				if(s != sensorSelected){
\end_layout

\begin_layout Plain Layout

					System.out.println(s.toString());
\end_layout

\begin_layout Plain Layout

					textVersion.setText(""+s.getVersion());
\end_layout

\begin_layout Plain Layout

					textVendor.setText(""+s.getVendor());
\end_layout

\begin_layout Plain Layout

					textPower.setText(s.getPower()+" mA");
\end_layout

\begin_layout Plain Layout

					textMaxRange.setText(""+s.getMaximumRange());
\end_layout

\begin_layout Plain Layout

					textResolution.setText(""+s.getResolution());
\end_layout

\begin_layout Plain Layout

					textMinDelay.setText(s.getMinDelay()/1000+" ms");
\end_layout

\begin_layout Plain Layout

					updateSensorListener();
\end_layout

\begin_layout Plain Layout

					sensorSelected = s;
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			@Override
\end_layout

\begin_layout Plain Layout

			public void onNothingSelected(AdapterView<?> parent) {
\end_layout

\begin_layout Plain Layout

				textVersion.setText(""); 
\end_layout

\begin_layout Plain Layout

				textVendor.setText("");
\end_layout

\begin_layout Plain Layout

			}		
\end_layout

\begin_layout Plain Layout

		});
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

	private List<String> getSensorsNames() {
\end_layout

\begin_layout Plain Layout

		//returns the list that contains the names of all available sensors
\end_layout

\begin_layout Plain Layout

		List<String> sensorNames = new ArrayList<String>();
\end_layout

\begin_layout Plain Layout

		for (Sensor s: sensors)
\end_layout

\begin_layout Plain Layout

			sensorNames.add(s.getName());
\end_layout

\begin_layout Plain Layout

		return sensorNames;
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	private class SensorEventsListener implements SensorEventListener {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		@Override
\end_layout

\begin_layout Plain Layout

		public void onSensorChanged(SensorEvent event) {
\end_layout

\begin_layout Plain Layout

			//show values
\end_layout

\begin_layout Plain Layout

			textX.setText(""+event.values[0]);
\end_layout

\begin_layout Plain Layout

			textY.setText(""+event.values[1]);
\end_layout

\begin_layout Plain Layout

			textZ.setText(""+event.values[2]);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		@Override
\end_layout

\begin_layout Plain Layout

		public void onAccuracyChanged(Sensor sensor, int accuracy) {
\end_layout

\begin_layout Plain Layout

			//do something when accuracy changes
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Best practices for accessing and using sensors
\end_layout

\begin_layout Standard
In this section are discussed the guidelines to design an optimized sensor
 implementation.
 
\end_layout

\begin_layout Standard
These guidelines are recommended best practices for anyone who is using
 the sensor framework to access sensors and acquire sensor data.
\end_layout

\begin_layout Subsubsection*
Verify sensors' availability
\end_layout

\begin_layout Standard
Android platform does not require to the manufacturer that a device includes
 particular sensors, then, before using a specific sensor it is necessary
 to check if this sensor exists.
 
\end_layout

\begin_layout Standard
Assume the existence of a sensor simply because is frequently used is a
 bad practice.
\end_layout

\begin_layout Subsubsection*
Unregister sensor listeners
\end_layout

\begin_layout Standard
If a sensor listener is registered and its activity is paused, the sensor
 will continue to acquire data and use battery resources unless the listener
 is unregisterd.
 The bettter way to optimize resources usage is to unregister the listener
 each time the application is paused, or the sensor is no longer needed,
 and then register it again when the app is resumed.
 This is possible using two methods provided by the 
\family typewriter
Activity
\family default
 class:
\end_layout

\begin_layout Description

\family typewriter
onPause()
\family default
 called when the application is going down (or lost the screen)
\end_layout

\begin_layout Description

\family typewriter
onResume()
\family default
 invoked when the application comes back to the screen
\end_layout

\begin_layout Standard
The following code is an example that show how to use this two methods in
 an 
\family typewriter
Activity
\family default
 that implements 
\family typewriter
SensorEventListener
\family default
 interface:
\end_layout

\begin_layout Standard
\align center

\color black
\begin_inset Box ovalbox
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "77page%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout LyX-Code

\color black
\begin_inset listings
lstparams "basicstyle={\footnotesize\sffamily},comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout LyX-Code

private SensorManager mSensorManager;
\end_layout

\begin_layout LyX-Code

private Sensor mSensor
\end_layout

\begin_layout LyX-Code

  ...
 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

@Override protected void onPause() {
\end_layout

\begin_layout LyX-Code

  super.onPause();
\end_layout

\begin_layout LyX-Code

  mSensorManager.unregisterListener(this, mSensor);
\end_layout

\begin_layout LyX-Code

}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

@Override protected void onResume() {
\end_layout

\begin_layout LyX-Code

  super.onResume();
\end_layout

\begin_layout LyX-Code

  mSensorManager.registerListener(this, mSensor, SensorManager.SENSOR_DELAY_NORMAL
);
\end_layout

\begin_layout LyX-Code

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Don't test your code on the emulator
\end_layout

\begin_layout Standard
The Android emulator cannot emulate sensors, thus, currently, is not possible
 to test the sensor code on Android Virtual Devices.
 The best way to run a test on sensor code is by using a physical device.
 There are, however, sensor simulators that can be used to simulate sensor
 output.
\end_layout

\begin_layout Subsubsection*
Don't block the onSensorChanged() method
\end_layout

\begin_layout Standard
Android system may call the 
\family typewriter
onSensorChanged(SensorEvent)
\family default
 method quite often because sensor data can changes at high rate, hence
 is recommended, as the best practice, do as little is possible into 
\family typewriter
onSensorChanged(SensorEvent)
\family default
 so as not to block his execution.
\end_layout

\begin_layout Standard
If an application requires any data filtering or reduction of sensor data,
 it would be better perform that work outside of the 
\family typewriter
onSensorChanged(SensorEvent)
\family default
 method.
\end_layout

\begin_layout Remark*
If the onSensorChange(SensorEvent) contains a loop the application is stopped
 by the system.
\end_layout

\begin_layout Subsubsection*
Avoid using deprecated methods or sensor types
\end_layout

\begin_layout Standard
Several methods and constants, such as 
\family typewriter
TYPE_ORIENTATION
\family default
 or 
\family typewriter
TYPE_TEMPERATURE
\family default
, have been deprecated, the first has been replaced by 
\family typewriter
getOrientation()
\family default
 method and the second, in devices that are running Android 4 Ice Cream
 Sandwich, by 
\family typewriter
TYPE_AMBIENT_TEMPERATURE
\family default
 constant.
\end_layout

\begin_layout Subsubsection*
Choose sensor delay carefully
\end_layout

\begin_layout Standard
The registerListener() method requires, in addiction to the listener and
 the sensor, the minimum delay between two notifications.
 The choise of the delivery rate must be suitable for the application or
 use-case: sensors can provide data at very high rates and allowing the
 system to send extra data which is not needed wastes system resources and
 uses battery power.
 Like the accuracy, Android provides, in SensorManager class, four differents
 constants that defines four different delivery rate:
\end_layout

\begin_layout Description

\family typewriter
SENSOR_DELAY_NORMAL
\family default
 delivery rate of 200000μs 
\end_layout

\begin_layout Description

\family typewriter
SENSOR_DELAY_UI
\family default
 delivery rate of 60000μs 
\end_layout

\begin_layout Description

\family typewriter
SENSOR_DELAY_GAME
\family default
 delivery rate of 20000μs
\end_layout

\begin_layout Description

\family typewriter
SENSOR_DELAY_FASTEST
\family default
 delivery rate of 0μs (enable the real delay time of the sensor, obtained
 by 
\family typewriter
getMinDelay()
\family default
 method)
\end_layout

\begin_layout Subsection
How Android Sensor Framework works
\end_layout

\begin_layout Standard
As mentioned, to access sensor information, developer must register one
 (or more) listener to a sensor through the sensor manager, after that Android
 System, according with the delay selected, calls the call-back method (onSensor
Changed) passing a SensorEvent object, that contains all informations, as
 parameter.
 This interaciont can be seen like a sort of observer pattern in which the
 sensor represent the observable object; when it changes its state the Android
 System notifies this change to the observers (each class that implements
 SensorEventListener) registered to the sensor through the Sensor Manager
 register method.
\end_layout

\begin_layout Standard
The following image tries to represent this interaction.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
How Android Sensor Framework works
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/AndroidSensorFramework.png
	lyxscale 30
	width 40page%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Android Sensor Support
\end_layout

\begin_layout Standard
This layer extends the Android Sensor Framework and simplifies the interaction
 with Android Sensors: each AndroidSensor, defined in this layer contains
 a specific AndroidSensorData that contains all informations relative to
 the last sensor update and it can be always requested with a get method
 and not only when the data changes.
 For example, using this layer, we can request the accelerometer data when
 the magnetic field changes or vice-versa.
\end_layout

\begin_layout Standard
All AndroidSensors defined are, at the same time observer (of the phisic
 sensor because implements 
\family typewriter
SensorEventListener
\family default
) and observable: the developer can attach to the 
\family typewriter
AndroidSensor
\family default
 a listener that does something when the data changes.
 The only operation that the 
\family typewriter
AndroidSensor
\family default
 does when the system calls 
\family typewriter
onSensorChanged
\family default
 is to update his sensor data and notifies this change to all his observers.
\end_layout

\begin_layout Standard
Another advantage is the 
\family typewriter
SensorFactory
\family default
 that the developer must use to obtain an 
\family typewriter
AndroidSensor
\family default
: passing to the factory the 
\family typewriter
SensorManager
\family default
 instance, the sensor type and the delay (one of delays defined in 
\family typewriter
SensorManager
\family default
 class) and it returns an instance of 
\family typewriter
AndroidSensor
\family default
 of the specific type requsted.
\end_layout

\begin_layout Standard
Last, but not least, 
\family typewriter
AndroidSensorData
\family default
 contains methods to convert it-self in strings: there are two possible
 representations: 
\family typewriter
JSON
\family default
 representation and Prolog-like representation that have a functor for the
 data type and contains other functors for each data (values, accuracy,
 timestamp, ...).
 Is defined also an utility class that recostruct an 
\family typewriter
AndroidSensorData
\family default
 from 
\family typewriter
JSON
\family default
 string.
\end_layout

\begin_layout Standard
In the following sub-sections is analyzed the project and described how
 to use this layer with a final example.
\end_layout

\begin_layout Subsection
AndroidSensorData package
\end_layout

\begin_layout Standard
The it.unibo.android.sensorData package contains all interfaces and implementations
 that realizes the SensorData model.
 Each sensor has a particular instance of AndroidSensorData that extends
 the superclass as shown in the image below:
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
SensorData class diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/sensorDataUML.png
	lyxscale 30
	width 90page%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
AndroidSensorData
\end_layout

\begin_layout Standard
This class provides the standard methods and variables of each subclass.
 It only implements the IObserver interface defined in the uniboInterfaces.jar
 library and extends the Observable java class.
\end_layout

\begin_layout Standard
The following codes shows the AndroidSensorData interface:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
IAndroidSensorData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.interfaces;
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

import it.unibo.is.interfaces.IObservable;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public interface IAndroidSensorData extends IObservable {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public String getName();
\end_layout

\begin_layout Plain Layout

	public float[] getValues();
\end_layout

\begin_layout Plain Layout

	public String getPrologRep();
\end_layout

\begin_layout Plain Layout

	public int getAccuracy();
\end_layout

\begin_layout Plain Layout

	public long getTimestamp();
\end_layout

\begin_layout Plain Layout

	public String getJsonRep(); 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
This methods are useful to obtain all standard informations such as values
 as array of float, accuracy, timestamp, name and the two string representations.
 In the following code, is shown the implementation of a generic AndroidSensorDa
ta.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AndroidSensorData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.implementation;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import java.util.Observable;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.IAndroidSensorData;
\end_layout

\begin_layout Plain Layout

import it.unibo.is.interfaces.IObserver;
\end_layout

\begin_layout Plain Layout

import com.google.gson.Gson;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class AndroidSensorData extends Observable implements IAndroidSensorData{
\end_layout

\begin_layout Plain Layout

	private String name;
\end_layout

\begin_layout Plain Layout

	private float[] values;
\end_layout

\begin_layout Plain Layout

	private long timestamp;
\end_layout

\begin_layout Plain Layout

	private int accuracy;
\end_layout

\begin_layout Plain Layout

	private boolean init; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidSensorData(){
\end_layout

\begin_layout Plain Layout

		this.init = false;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidSensorData(float[] values, int accuracy, long timestamp){
\end_layout

\begin_layout Plain Layout

		this.name = this.getClass().getSimpleName();
\end_layout

\begin_layout Plain Layout

		this.values = values;
\end_layout

\begin_layout Plain Layout

		this.accuracy = accuracy;
\end_layout

\begin_layout Plain Layout

		this.timestamp = timestamp;
\end_layout

\begin_layout Plain Layout

		this.init = true;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public String getName() {
\end_layout

\begin_layout Plain Layout

		if(initialized()) 
\end_layout

\begin_layout Plain Layout

			return name;
\end_layout

\begin_layout Plain Layout

		else 
\end_layout

\begin_layout Plain Layout

			return "Not yet initialized";
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public float[] getValues() {
\end_layout

\begin_layout Plain Layout

		return values;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public int getAccuracy() {
\end_layout

\begin_layout Plain Layout

		return accuracy;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public long getTimestamp() {
\end_layout

\begin_layout Plain Layout

		return timestamp;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public String getPrologRep() {
\end_layout

\begin_layout Plain Layout

		if(initialized()){
\end_layout

\begin_layout Plain Layout

			String rep = getName()+"(values(";
\end_layout

\begin_layout Plain Layout

			for(int i=0;i<values.length;i++){
\end_layout

\begin_layout Plain Layout

				rep += "v"+i+"("+values[i]+")";
\end_layout

\begin_layout Plain Layout

				if(i!=values.length)
\end_layout

\begin_layout Plain Layout

					rep += ",";
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			rep += "),timestamp("+getTimestamp()+"),accuracy("+getAccuracy()+"))";
\end_layout

\begin_layout Plain Layout

			return rep;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else 
\end_layout

\begin_layout Plain Layout

			return "Not yet initialized";
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public String getJsonRep(){
\end_layout

\begin_layout Plain Layout

		if(initialized())
\end_layout

\begin_layout Plain Layout

			return (new Gson()).toJson(this);
\end_layout

\begin_layout Plain Layout

		else
\end_layout

\begin_layout Plain Layout

			return null;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public void addObserver(IObserver observer) {
\end_layout

\begin_layout Plain Layout

		if(initialized())
\end_layout

\begin_layout Plain Layout

			super.addObserver(observer);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	protected boolean initialized() {
\end_layout

\begin_layout Plain Layout

		return init;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Each AndroidSensorData extends this class and provides specific features
 for his particular case.
\end_layout

\begin_layout Subsubsection
AndroidSingleValueSensorData
\end_layout

\begin_layout Standard
This class adds to the AndroidSensorData only one method that returns the
 single value measured by the sensor:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
IAndroidSingleValueSensorData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.interfaces;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public interface IAndroidSingleValueSensorData extends IAndroidSensorData{
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public float getValue(); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
In the implementation is extended the constructor that saves in a variable
 the measured value (value[0] passed as argument) and overrides the getPrologRep
() method:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AndroidSingleValueSensorData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.implementation;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.IAndroidSingleValueSensorData;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class AndroidSingleValueSensorData extends AndroidSensorData implements
\end_layout

\begin_layout Plain Layout

		IAndroidSingleValueSensorData {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	protected float value; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidSingleValueSensorData(){
\end_layout

\begin_layout Plain Layout

		super();
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidSingleValueSensorData(float[] values, int accuracy, long
 timestamp) {
\end_layout

\begin_layout Plain Layout

		super(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		value = values[0];
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public float getValue() {
\end_layout

\begin_layout Plain Layout

		return value;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public String getPrologRep(){
\end_layout

\begin_layout Plain Layout

		if(initialized()){
\end_layout

\begin_layout Plain Layout

			String rep = getName()+"(value("+getValue()+"),";
\end_layout

\begin_layout Plain Layout

			rep += "timestamp("+getTimestamp()+"),accuracy("+getAccuracy()+"))";
\end_layout

\begin_layout Plain Layout

			return rep;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else 
\end_layout

\begin_layout Plain Layout

			return "Not yet initialized";
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
From this class are extended other subclasses that provides specific methods
 that calls the super getValue() and in some cases had a conversion:
\end_layout

\begin_layout Description
IAndroidLightData
\end_layout

\begin_deeper
\begin_layout Itemize
getLight(); returns the light in lx.
\end_layout

\end_deeper
\begin_layout Description
IAndroidPressureData
\end_layout

\begin_deeper
\begin_layout Itemize
getPressure(); returns the pressure in hPa or mbar.
\end_layout

\end_deeper
\begin_layout Description
IAndroidProximityData
\end_layout

\begin_deeper
\begin_layout Itemize
isPresent(); this method returns a boolean: if the device detects something
 returns true.
\end_layout

\end_deeper
\begin_layout Description
IAndroidRelativeHumidity
\end_layout

\begin_deeper
\begin_layout Itemize
getHumidity(); returns the relative humidity in %.
\end_layout

\end_deeper
\begin_layout Description
IAndroidTemperatureData
\end_layout

\begin_deeper
\begin_layout Itemize
getTemperatureCelsius(); returns the temperature in Celsius degrees.
\end_layout

\begin_layout Itemize
getTemperatureFarenheit(); returns the temperature in Farenheit degrees.
\end_layout

\begin_layout Itemize
getTemperatureKelvin(); returns the temperature in Kelvin degrees.
\end_layout

\end_deeper
\begin_layout Subsubsection
AndroidThreeAxisSensorData
\end_layout

\begin_layout Standard
This class defines the standard SensorData for each three axis sensor (accelerom
eter, gyroscope, etc.).
 It adds to the AndroidSensorData three methods (one for each axis' values).
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
IAndroidThreeAxisSensorData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.interfaces;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public interface IAndroidThreeAxisSensorData extends IAndroidSensorData
 {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		public float getX();
\end_layout

\begin_layout Plain Layout

		public float getY();
\end_layout

\begin_layout Plain Layout

		public float getZ();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Like the AndroidSingleValueSensorData it defines a variable for each axis'
 value, extends the constructor and overrides the getPrologRep() method:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AndroidThreeAxisSensorData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.implementation;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.IAndroidThreeAxisSensorData;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class AndroidThreeAxisSensorData extends AndroidSensorData implements
\end_layout

\begin_layout Plain Layout

		IAndroidThreeAxisSensorData {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	float x, y, z; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidThreeAxisSensorData(){
\end_layout

\begin_layout Plain Layout

		super(); 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidThreeAxisSensorData(float[] values, int accuracy, long timestamp)
 {
\end_layout

\begin_layout Plain Layout

		super(values, accuracy, timestamp); 
\end_layout

\begin_layout Plain Layout

		x = values[0];
\end_layout

\begin_layout Plain Layout

		y = values[1];
\end_layout

\begin_layout Plain Layout

		z = values[2];
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public float getX() {
\end_layout

\begin_layout Plain Layout

		return x; 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override 
\end_layout

\begin_layout Plain Layout

	public float getY() {
\end_layout

\begin_layout Plain Layout

		return y;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public float getZ() {
\end_layout

\begin_layout Plain Layout

		return z;
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public String getPrologRep(){
\end_layout

\begin_layout Plain Layout

		if(initialized()){
\end_layout

\begin_layout Plain Layout

			String rep = getName()+"(x("+getX()+"),y("+getY()+"),z("+getZ()+"),";
\end_layout

\begin_layout Plain Layout

			rep += "timestamp("+getTimestamp()+"),accuracy("+getAccuracy()+"))";
\end_layout

\begin_layout Plain Layout

			return rep;
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

		else 
\end_layout

\begin_layout Plain Layout

			return "Not yet initialized"; 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
and, still other SensorData, each class that extends this have specific
 methods:
\end_layout

\begin_layout Description
IAndroidAccelerometerData
\end_layout

\begin_deeper
\begin_layout Itemize
getAccelerationX(); returns the acceleration value along the X axis;
\end_layout

\begin_layout Itemize
getAccelerationY(); returns the acceleration value along the Y axis;
\end_layout

\begin_layout Itemize
getAccelerationZ(); returns the acceleration value along the Z axis;
\end_layout

\begin_layout Itemize
getAcceleration(); returns the device's acceleration calculating as 
\begin_inset Formula $\sqrt{a_{x}^{2}+a_{y}^{2}+a_{z}^{2}}$
\end_inset


\end_layout

\end_deeper
\begin_layout Description
IAndroidGravityData
\end_layout

\begin_deeper
\begin_layout Itemize
getGravityX(); returns the gravity value along the X axis;
\end_layout

\begin_layout Itemize
getGravityY(); returns the gravity value along the Y axis;
\end_layout

\begin_layout Itemize
getGravityZ(); returns the gravity value along the Z axis
\end_layout

\end_deeper
\begin_layout Description
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Description
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Description
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Description
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Description
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Description
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Description
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Description
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Description
IAndroidGyroscopeData
\end_layout

\begin_deeper
\begin_layout Itemize
getRotationRateX(); returns the rotation rate value around the X axis;
\end_layout

\begin_layout Itemize
getRotationRateY(); returns the rotation rate value around the Y axis;
\end_layout

\begin_layout Itemize
getRotationRateZ(); returns the rotation rate value around the Z axis
\end_layout

\end_deeper
\begin_layout Description
IAndroidMagneticFieldData
\end_layout

\begin_deeper
\begin_layout Itemize
getMagneticFieldX(); returns the magnetic field value along the X axis;
\end_layout

\begin_layout Itemize
getMagneticFieldY(); returns the magnetic field value along the Y axis;
\end_layout

\begin_layout Itemize
getMagneticFieldZ(); returns the magnetic field value along the Z axis
\end_layout

\end_deeper
\begin_layout Description
IAndroidPositionRotationVectorData
\end_layout

\begin_deeper
\begin_layout Itemize
getComponentX(); returns the rotation component value around the X axis;
\end_layout

\begin_layout Itemize
getComponentY(); returns the rotation component value around the Y axis;
\end_layout

\begin_layout Itemize
getComponentZ(); returns the rotation component value around the Z axis
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsubsection
AndroidThreeAxisSensorDataWithCorrection
\end_layout

\begin_layout Standard
This class extends the ThreeAxisSensorData and adds to it other three values
 that represents the correction applied by the system accordin to the sensor
 informations:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
IAndroidThreeAxisSensorDataWithCorrection.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.interfaces;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public interface IAndroidThreeAxisSensorDataWithCorrection extends IAndroidThree
AxisSensorData{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	 	public float getCorrectionX();
\end_layout

\begin_layout Plain Layout

	 	public float getCorrectionY();
\end_layout

\begin_layout Plain Layout

	 	public float getCorrectionZ();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Like the other subclasses it defines a variable for each axis' correction
 values, extends the constructor and overrides the getPrologRep() method:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AndroidThreeAxisSensorData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.implementation;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.IAndroidThreeAxisSensorDataWithCorrecti
on;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class AndroidThreeAxisSensorDataWithCorrection extends AndroidThreeAxisSe
nsorData
\end_layout

\begin_layout Plain Layout

				implements  IAndroidThreeAxisSensorDataWithCorrection {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	float correctionX, correctionY, correctionZ; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidThreeAxisSensorDataWithCorrection(){ 
\end_layout

\begin_layout Plain Layout

		super(); 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidThreeAxisSensorDataWithCorrection(float[] values, int accuracy,
 
\end_layout

\begin_layout Plain Layout

													long timestamp) {
\end_layout

\begin_layout Plain Layout

		super(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		correctionX = values[3];
\end_layout

\begin_layout Plain Layout

		correctionY = values[4];
\end_layout

\begin_layout Plain Layout

		correctionZ = values[5];
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public float getCorrectionX() {
\end_layout

\begin_layout Plain Layout

		return correctionX;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public float getCorrectionY() { 
\end_layout

\begin_layout Plain Layout

		return correctionY;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public float getCorrectionZ() {
\end_layout

\begin_layout Plain Layout

		return z;
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public String getPrologRep(){
\end_layout

\begin_layout Plain Layout

		if(initialized()){
\end_layout

\begin_layout Plain Layout

			String rep = getName()+"(x("+getX()+"),y("+getY()+"),z("+getZ()+"),";
\end_layout

\begin_layout Plain Layout

			rep += "correctionX("+getCorrectionX()+"),correctionY("+getCorrectionY()+"),"
;
\end_layout

\begin_layout Plain Layout

			rep += "correctionZ("+getCorrectionZ()+"),";
\end_layout

\begin_layout Plain Layout

			rep += "timestamp("+getTimestamp()+"),accuracy("+getAccuracy()+"))";
\end_layout

\begin_layout Plain Layout

			return rep;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else
\end_layout

\begin_layout Plain Layout

			return "Not yet initialized";	
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

The only two sensors that have this type of data representation are the
 GyroscopeUncalibrated and the MagneticFieldUncalibrated and their data
 representation extends this class but implements also the Gyroscope or
 MagneticField data representation.
 In the following code is show the AndroidGyroscopeUncalibratedData, for
 the AndroidMagneticFieldUncalibratedData the implementation is similar,
 the only difference is the name of get methods for correction (the gyroscope
 have getDrift and the magnetic field have getBias):
\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
IAndroidGyroscopeUncalibratedData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.interfaces.motionSensors;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.IAndroidThreeAxisSensorDataWithCorrecti
on;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public interface IAndroidGyroscopeUncalibratedData extends
\end_layout

\begin_layout Plain Layout

					IAndroidThreeAxisSensorDataWithCorrection, IAndroidGyroscopeData {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public float getDriftX();
\end_layout

\begin_layout Plain Layout

	public float getDriftY();
\end_layout

\begin_layout Plain Layout

	public float getDriftZ();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AndroidGyroscopeUncalibratedData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.implementation.motionSensors;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.implementation.AndroidThreeAxisSensorDataWithCorre
ction;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.motionSensors.IAndroidGyroscopeUncalibra
tedData;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class AndroidGyroscopeUncalibratedData extends
\end_layout

\begin_layout Plain Layout

				AndroidThreeAxisSensorDataWithCorrection implements 
\end_layout

\begin_layout Plain Layout

				IAndroidGyroscopeUncalibratedData{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidGyroscopeUncalibratedData(){ 
\end_layout

\begin_layout Plain Layout

		super(); 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidGyroscopeUncalibratedData(float[] values, int accuracy, long
 timestamp) { 
\end_layout

\begin_layout Plain Layout

		super(values, accuracy, timestamp); 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override 
\end_layout

\begin_layout Plain Layout

	public float getRotationRateX() { 
\end_layout

\begin_layout Plain Layout

		return getX(); 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override 
\end_layout

\begin_layout Plain Layout

	public float getRotationRateY() { 
\end_layout

\begin_layout Plain Layout

		return getY();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override 
\end_layout

\begin_layout Plain Layout

	public float getRotationRateZ() { 
\end_layout

\begin_layout Plain Layout

		return getZ();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public float getDriftX() {
\end_layout

\begin_layout Plain Layout

		return getCorrectionX();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public float getDriftY() { 
\end_layout

\begin_layout Plain Layout

		return getCorrectionY();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public float getDriftZ() { 
\end_layout

\begin_layout Plain Layout

		return getCorrectionZ(); 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection
AndroidMotionRotationVectorData
\end_layout

\begin_layout Standard
This class realizes the data representation for a motion rotation vector
 sensor.
 It is different form a position rotation vector because he can have 4 values:
 the same of position rotation vector and a scalar component:
\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
IAndroidMotionRotationVectorData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.interfaces.motionSensors;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.IAndroidSensorData;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public interface IAndroidMotionRotationVectorData extends IAndroidSensorData
 {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public float getComponentX();
\end_layout

\begin_layout Plain Layout

	public float getComponentY();
\end_layout

\begin_layout Plain Layout

	public float getComponentZ();
\end_layout

\begin_layout Plain Layout

	public float getScalarComponent();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AndroidMotionRotationVectorData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.implementation.motionSensors;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.implementation.AndroidSensorData;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.motionSensors.IAndroidMotionRotationVect
orData;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class AndroidMotionRotationVectorData extends AndroidSensorData 
\end_layout

\begin_layout Plain Layout

						implements IAndroidMotionRotationVectorData {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	protected float componentX, componentY, componentZ, componentS;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidMotionRotationVectorData(){
\end_layout

\begin_layout Plain Layout

		super(); 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidMotionRotationVectorData(float[] values, int accuracy, long
 timestamp) {
\end_layout

\begin_layout Plain Layout

		super(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		componentX = values[0];
\end_layout

\begin_layout Plain Layout

		componentY = values[1];
\end_layout

\begin_layout Plain Layout

		componentZ = values[2]; 
\end_layout

\begin_layout Plain Layout

		if (values.length == 4)
\end_layout

\begin_layout Plain Layout

			componentS = values[3];
\end_layout

\begin_layout Plain Layout

 	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override 
\end_layout

\begin_layout Plain Layout

	public float getComponentX() { 
\end_layout

\begin_layout Plain Layout

		return componentX; 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override 
\end_layout

\begin_layout Plain Layout

	public float getComponentY() { 
\end_layout

\begin_layout Plain Layout

		return componentY; 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override 
\end_layout

\begin_layout Plain Layout

	public float getComponentZ() {
\end_layout

\begin_layout Plain Layout

		return componentZ; 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override 
\end_layout

\begin_layout Plain Layout

	public float getScalarComponent() { 
\end_layout

\begin_layout Plain Layout

		return componentS; 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public String getPrologRep(){
\end_layout

\begin_layout Plain Layout

		String rep = getName()+"(x("+getComponentX()+"),y("+getComponentY()+"),";
\end_layout

\begin_layout Plain Layout

		rep += "z("+getComponentZ()+"),s("+getScalarComponent()+"),";
\end_layout

\begin_layout Plain Layout

		rep += "timestamp("+getTimestamp()+"),accuracy("+getAccuracy()+"))";
\end_layout

\begin_layout Plain Layout

		return rep;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection
AndroidDetectionSensorData
\end_layout

\begin_layout Standard
This kind of sensor data representation is different from the others: it
 don't have any value and the only thing that it save is the real time of
 the detection (when the constructor is called):
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
IAndroidDetectionSensorData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.interfaces;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public interface IAndroidDetectionSensorData extends IAndroidSensorData{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public long getLastDetectionTime(); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AndroidDetectionSensorData.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.implementation;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.IAndroidDetectionSensorData;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/*
\end_layout

\begin_layout Plain Layout

	*	This class is used for each detection sensors: SIGNIFICANT_MOTION and
 STEP_DETECTOR
\end_layout

\begin_layout Plain Layout

	*/
\end_layout

\begin_layout Plain Layout

public class AndroidDetectionSensorData extends AndroidSensorData 
\end_layout

\begin_layout Plain Layout

										implements IAndroidDetectionSensorData {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	private long detectionTime; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidDetectionSensorData(){ 
\end_layout

\begin_layout Plain Layout

		super();
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidDetectionSensorData(float[] values, int accuracy, long timestamp)
 { 
\end_layout

\begin_layout Plain Layout

		super(values, accuracy, timestamp); 
\end_layout

\begin_layout Plain Layout

		detectionTime = System.currentTimeMillis(); 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//for json reconstruction 
\end_layout

\begin_layout Plain Layout

	public AndroidDetectionSensorData(float[] values, int accuracy, long timestamp,
 long detectionTime){
\end_layout

\begin_layout Plain Layout

		super(values, accuracy, timestamp); 
\end_layout

\begin_layout Plain Layout

		this.detectionTime = detectionTime; 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override 
\end_layout

\begin_layout Plain Layout

	/** 
\end_layout

\begin_layout Plain Layout

	 * This method, IN THIS CLASS, returns a null value because this type of
 sensors
\end_layout

\begin_layout Plain Layout

 	* doesn't have values but only notifies a detection, so may return an
 empty array.
 
\end_layout

\begin_layout Plain Layout

	 */
\end_layout

\begin_layout Plain Layout

	public float[] getValues() { 
\end_layout

\begin_layout Plain Layout

		return null; 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public String getPrologRep(){
\end_layout

\begin_layout Plain Layout

		if(initialized()){
\end_layout

\begin_layout Plain Layout

			String rep = getName()+"(timestamp("+getTimestamp()+"),accuracy("+getAccuracy
()+"))";
\end_layout

\begin_layout Plain Layout

			return rep; 
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

		else 
\end_layout

\begin_layout Plain Layout

			return "Not yet initialized"; 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public long getLastDetectionTime() { 
\end_layout

\begin_layout Plain Layout

		return detectionTime; 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Is needed an override of getValue() method because he don't have values,
 so is correct that this method returns null and is also necessary to add
 another constructor that have the detection time as parameter for the JSON
 reconstruction.
\end_layout

\begin_layout Subsubsection
AndroidSensorDataUtils
\end_layout

\begin_layout Standard
This is a static class that provides a reconstruction of SensorData object
 from a JSON string.
 It only contains a static method that obtain information using a JSON parser
 and then, according with the name, calls the specific constructor of SensorData
:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AndroidSensorDataUtils.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorData.utils;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.implementation.*;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.implementation.motionSensors.*;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.implementation.positionSensors.*;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.implementation.environmentSensors.*;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.IAndroidSensorData;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import com.google.gson.JsonArray; 
\end_layout

\begin_layout Plain Layout

import com.google.gson.JsonObject; 
\end_layout

\begin_layout Plain Layout

import com.google.gson.JsonParser;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class AndroidSensorDataUtils { 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public static IAndroidSensorData buildDataFromJson(String json){ 
\end_layout

\begin_layout Plain Layout

		JsonParser parser = new JsonParser();
\end_layout

\begin_layout Plain Layout

		JsonObject object = parser.parse(json).getAsJsonObject();
\end_layout

\begin_layout Plain Layout

		String name = object.get("name").getAsString();
\end_layout

\begin_layout Plain Layout

		JsonArray arr = object.get("values").getAsJsonArray();
\end_layout

\begin_layout Plain Layout

		float [] values = new float[arr.size()]; 
\end_layout

\begin_layout Plain Layout

		for (int i = 0; i < arr.size(); i++) 
\end_layout

\begin_layout Plain Layout

			values[i] = arr.get(i).getAsFloat();
\end_layout

\begin_layout Plain Layout

		long timestamp = object.get("timestamp").getAsLong();
\end_layout

\begin_layout Plain Layout

		int accuracy = object.get("accuracy").getAsInt();
\end_layout

\begin_layout Plain Layout

		/*
\end_layout

\begin_layout Plain Layout

		 * MOTION SENSORS
\end_layout

\begin_layout Plain Layout

		 */
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidAccelerometerData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidAccelerometerData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidLinearAccelerationData")){ 
\end_layout

\begin_layout Plain Layout

			return new AndroidAccelerometerData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidGravityData")){ 
\end_layout

\begin_layout Plain Layout

			return new AndroidGravityData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidGyroscopeData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidGyroscopeData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidGyroscopeUncalibratedData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidGyroscopeUncalibratedData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidRotationVectorData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidMotionRotationVectorData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidDetectionSensorData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidDetectionSensorData(values, accuracy, timestamp, 
\end_layout

\begin_layout Plain Layout

												object.get("detectionTime").getAsLong());
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidStepCounterData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidStepCounterData(values, accuracy, timestamp); 
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		/*
\end_layout

\begin_layout Plain Layout

		 * POSITION SENSORS
\end_layout

\begin_layout Plain Layout

		 */
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidMagneticFieldData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidMagneticFieldData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidMagneticFieldUncalibratedData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidMagneticFieldUncalibratedData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidGeomagneticRotationVectorData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidGeomagneticRotationVectorData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

		if(name.equals("AndroidGameRotationVectorData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidGameRotationVectorData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidProximityData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidProximityData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		//Only for retro-compatibility
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidOrientationData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidOrientationData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		/*
\end_layout

\begin_layout Plain Layout

		 * AMBIENT SENSORS
\end_layout

\begin_layout Plain Layout

		 */
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidTemperatureData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidTemperatureData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidLightData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidLightData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidPressureData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidPressureData(values, accuracy, timestamp);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if(name.equals("AndroidRelativeHumidityData")){
\end_layout

\begin_layout Plain Layout

			return new AndroidRelativeHumidityData(values, accuracy, timestamp);
 
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		return null;
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
AndroidSensorSupport package
\end_layout

\begin_layout Standard
The AndroidSensorSupport package contains all classes that describe a sensor,
 extending the Android'idea of sensor.
 As mentioned for Android a sensor data cannot be asked to the sensor and
 sensors doesn't have a variable that contains last update values.
 These classes implements the Android's SensorEventListener interface and
 also IObserver and IObservable interfaces defined in uniboInterfaces.jar
 contained in it.unibo.iss.libs.
 Each sensor extends the Observable class, so the developer can attach observer(
s) eachone can do different tasks, without interferences with the sensor
 update (this is the only operation that the onSensorChange() method does,
 followed by the update of observers).
\end_layout

\begin_layout Standard
The following image represent the diagram class of the AndroidSensorSupport
 package:
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
SensorSupport class diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/sensorSupport.png
	lyxscale 30
	width 90page%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
AndroidSensor
\end_layout

\begin_layout Standard
AndroidSensor is the superclass that defines all methods that each sensor
 must provide to the developer.
 The interface shows only methods usefull for the developer :
\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
IAndroidSensor.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorSupport.interfaces;
\end_layout

\begin_layout Plain Layout

import it.unibo.is.interfaces.IObservable;
\end_layout

\begin_layout Plain Layout

import it.unibo.is.interfaces.IObserver;
\end_layout

\begin_layout Plain Layout

import android.hardware.SensorEventListener;
\end_layout

\begin_layout Plain Layout

import android.hardware.SensorManager;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.IAndroidSensorData;
\end_layout

\begin_layout Plain Layout

public interface IAndroidSensor extends SensorEventListener, IObserver,
 IObservable{
\end_layout

\begin_layout Plain Layout

	public void unregister(SensorManager manager);
\end_layout

\begin_layout Plain Layout

	public IAndroidSensorData getData();
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AndroidSensor.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorSupport.implementations;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.interfaces.IAndroidSensor;
\end_layout

\begin_layout Plain Layout

import it.unibo.is.interfaces.IObserver;
\end_layout

\begin_layout Plain Layout

import java.util.Observable;
\end_layout

\begin_layout Plain Layout

import android.hardware.Sensor;
\end_layout

\begin_layout Plain Layout

import android.hardware.SensorEvent;
\end_layout

\begin_layout Plain Layout

import android.hardware.SensorManager;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.implementation.AndroidSensorData;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.IAndroidSensorData;
\end_layout

\begin_layout Plain Layout

public abstract class AndroidSensor extends Observable implements IAndroidSensor
 { 
\end_layout

\begin_layout Plain Layout

	protected static IAndroidSensorData sensorData; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public AndroidSensor(){
\end_layout

\begin_layout Plain Layout

		sensorData = new AndroidSensorData();
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public void onSensorChanged(SensorEvent event) {
\end_layout

\begin_layout Plain Layout

		sensorData = new AndroidSensorData(event.values, event.accuracy, event.timestamp)
;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public void onAccuracyChanged(Sensor sensor, int accuracy) {
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public void update(Observable arg0, Object arg1) {
\end_layout

\begin_layout Plain Layout

		this.setChanged(); 
\end_layout

\begin_layout Plain Layout

		this.notifyObservers( arg1 );
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public void addObserver(IObserver arg0) {
\end_layout

\begin_layout Plain Layout

		super.addObserver(arg0);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public void unregister(SensorManager manager){
\end_layout

\begin_layout Plain Layout

		this.deleteObservers();
\end_layout

\begin_layout Plain Layout

		manager.unregisterListener(this);
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public IAndroidSensorData getData(){ 
\end_layout

\begin_layout Plain Layout

		return sensorData; 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

The interfaces describes all methods useful for the developer:
\end_layout

\begin_layout Description
unregister() removes all observers and unregister the AndroidSensor from
 the SensorManager.
 Usefull when the application goes onPause()
\end_layout

\begin_layout Description
getData() returns the last updated SensorData.
 In this class returns a generic SensorData, but in subclasses this method
 is overwritten by another getData() that returns the specific SensorData.
\end_layout

\begin_layout Standard
while the implementation defines also all 
\begin_inset Quotes eld
\end_inset

background
\begin_inset Quotes erd
\end_inset

 method: 
\end_layout

\begin_layout Description
onSensorChanged() inherited from SensorEventListener, that in this case
 only updates the SensorData.
 In subclassess also call the update method.
\end_layout

\begin_layout Description
update() inherited from the Observable class.
 Set his value as changed and then send a notification to all observers
 with the update data.
\end_layout

\begin_layout Description
addObserver() inherited from the Observable class.
 Only call the super method.
\end_layout

\begin_layout Standard
As mentioned, all subclasses 
\end_layout

\begin_layout Itemize
overrides the onSensorChange() method updating the specific SensorData and
 then calls the update method passing as paramenter the new SensorData.
\end_layout

\begin_layout Itemize
overrides the unregister() method: deletes the instance from the instances
 list and then calls the super method.
\end_layout

\begin_layout Itemize
overwrite the getData() method with a specific method that returns a specific
 type of SensorData.
\end_layout

\begin_layout Itemize
defines a getInstance() method that, if exist, returns an instance of the
 specific AndroidSensor requested, else calls the constructor and then return
 this instance.
\end_layout

\begin_layout Itemize
defines a private constructor that register the AndroidSensor to the SensorManag
er and initialize a new SensorData as null (until the first update is not
 received).
\end_layout

\begin_layout Standard
The following code shows an AndroidAccelerometer.
 In the interface the only method introduced is the new getData() that returns
 an IAndroidAccelerometerData, while in the implementation are defined the
 methods described above:
\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
IAndroidAccelerometer.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorSupport.interfaces.motionSensors;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.interfaces.IAndroidSensor;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.motionSensors.IAndroidAccelerometerData;
\end_layout

\begin_layout Plain Layout

public interface IAndroidAccelerometer extends IAndroidSensor {
\end_layout

\begin_layout Plain Layout

	public IAndroidAccelerometerData getData(); 
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AndroidAccelerometer.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorSupport.implementations.motionSensors;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.implementations.AndroidSensor;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.interfaces.motionSensors.IAndroidAccelerometer;
\end_layout

\begin_layout Plain Layout

import android.hardware.Sensor;
\end_layout

\begin_layout Plain Layout

import android.hardware.SensorEvent;
\end_layout

\begin_layout Plain Layout

import android.hardware.SensorManager;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.implementation.motionSensors.AndroidAccelerometerDa
ta;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.motionSensors.IAndroidAccelerometerData;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class AndroidAccelerometer extends AndroidSensor implements IAndroidAccel
erometer {
\end_layout

\begin_layout Plain Layout

	private static AndroidAccelerometer[] instances = new AndroidAccelerometer[4];
\end_layout

\begin_layout Plain Layout

	protected IAndroidAccelerometerData sensorData;
\end_layout

\begin_layout Plain Layout

	public static AndroidAccelerometer getInstance(SensorManager manager, int
 delay){
\end_layout

\begin_layout Plain Layout

		Sensor accelerometer = manager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
\end_layout

\begin_layout Plain Layout

		if(accelerometer != null){
\end_layout

\begin_layout Plain Layout

			int index;
\end_layout

\begin_layout Plain Layout

			switch (delay){
\end_layout

\begin_layout Plain Layout

				case SensorManager.SENSOR_DELAY_NORMAL:
\end_layout

\begin_layout Plain Layout

					index = 0;
\end_layout

\begin_layout Plain Layout

					break; 
\end_layout

\begin_layout Plain Layout

				case SensorManager.SENSOR_DELAY_UI:
\end_layout

\begin_layout Plain Layout

					index = 1; 
\end_layout

\begin_layout Plain Layout

					break; 
\end_layout

\begin_layout Plain Layout

				case SensorManager.SENSOR_DELAY_GAME:
\end_layout

\begin_layout Plain Layout

					index = 2;
\end_layout

\begin_layout Plain Layout

					break;
\end_layout

\begin_layout Plain Layout

				case SensorManager.SENSOR_DELAY_FASTEST:
\end_layout

\begin_layout Plain Layout

					index = 3;
\end_layout

\begin_layout Plain Layout

					break;
\end_layout

\begin_layout Plain Layout

				default: return null;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			if (instances[index] == null)
\end_layout

\begin_layout Plain Layout

				instances[index] = new AndroidAccelerometer(manager, accelerometer,
 delay);
\end_layout

\begin_layout Plain Layout

			return instances[index];
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else
\end_layout

\begin_layout Plain Layout

			return null;
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

	private AndroidAccelerometer(SensorManager manager, Sensor accelerometer,
 int delay){
\end_layout

\begin_layout Plain Layout

		 sensorData = new AndroidAccelerometerData();
\end_layout

\begin_layout Plain Layout

	 	manager.registerListener(this, accelerometer, delay);
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public void onSensorChanged(SensorEvent event) {
\end_layout

\begin_layout Plain Layout

		sensorData = new AndroidAccelerometerData(event.values, event.accuracy,
 event.timestamp);
\end_layout

\begin_layout Plain Layout

		this.update(this, sensorData);
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override 
\end_layout

\begin_layout Plain Layout

	public IAndroidAccelerometerData getData(){
\end_layout

\begin_layout Plain Layout

		return sensorData;
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override 
\end_layout

\begin_layout Plain Layout

	public void unregister(SensorManager manager){
\end_layout

\begin_layout Plain Layout

		for(int i = 0; i < instances.length; i++)
\end_layout

\begin_layout Plain Layout

			if(this.equals(instances[i]))
\end_layout

\begin_layout Plain Layout

				instances[i] = null;
\end_layout

\begin_layout Plain Layout

		super.unregister(manager);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}  
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
For each other sensor the implementation is the same, the only difference
 is the type of SensorData and the type of the instances list (obviously
 is the same of the AndroidSensor).
 For the SensorData type is possible to reference with the following table
 that realizes a match between the Sensor defined by Android, and the new
 AndroidSensor classess with the AndroidSensorData:
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Relation between Sensor Type, AndroidSensors and AndroidSensorData
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="21" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="1col%">
<column alignment="left" valignment="middle" width="30col%">
<column alignment="left" valignment="middle" width="30text%">
<column alignment="left" valignment="middle" width="35text%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
rowcolor{cyan}
\end_layout

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\series bold
Sensor type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\series bold
AndroidSensor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\series bold
AndroidSensorData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rotate="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Env.
 Sensors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_AMBIENT_TEMPERATURE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidTemperature
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidTemperatureData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_LIGHT
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidLight
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidLightData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_PRESSURE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidPressure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidPressureData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_RELATIVE_HUMIDITY
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidRelativeHumidity
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidRelativeHumidityData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_TEMPERATURE
\begin_inset Foot
status open

\begin_layout Plain Layout
This sensor type is replaced in Android 4.0 (API Level 14) with TYPE_AMBIENT_TEMP
ERATURE.
 
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidTemperature
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidTemperatureData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rotate="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Motion Sensors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_ACCELEROMETER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidAccelerometer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidAccelerometerData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_GRAVITY
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidGravity
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidGravityData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_GYROSCOPE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidGyroscope
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidGyroscopeData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_GYROSCOPE_UNCALIBRATED
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidGyroscopeUncalibrated
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidGyroscopeUncalibratedData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_LINEAR_ACCELERATION
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidLinearAcceleration
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidAccelerometerData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_ROTATION_VECTOR
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidRotationVector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidMotionRotationVectorData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_SIGNIFICANT_MOTION
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidSignificantMotion
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidDetectionSensorData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_STEP_COUNTER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
SensorStepCounter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidStepCounterData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_STEP_DETECTOR
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidStepDetector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidDetectionSensorData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rotate="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Position Sensors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_GAME_ROTATION_VECTOR
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidGameRotationVector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidPositionRotationVectorData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_GEOMAGNETIC_ROTATION_VECTOR
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidGeomagneticRotationVector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidPositionRotationVectorData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_MAGNETIC_FIELD
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidMagneticField
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidMagneticFieldData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_MAGNETIC_FIELD_UNCALIBRATED
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidMagneticFieldUncalibrated
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidMagneticFieldUncalibratedData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_ORIENTATION
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This sensor was deprecated in Android 2.2 (API Level 8).
 The sensor framework provides alternate methods for acquiring device orientatio
n.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidOrientation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidOrientationData
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
TYPE_PROXIMITY
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidProximity
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
AndroidProximityData
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
AndroidSensorFactory
\end_layout

\begin_layout Standard
This class is defined in the main implementation package (it.unibo.android.sensorSu
pport.implementation) and provides methods to obtain an instance of a particular
 AndroidSensor.
 Developers can ask to the factory a specific sensor in two methods:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
getInstance() passing the type of sensor as a parameter (with the delay,
 the observer and the SensorManager).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
get[SENSOR]() where [SENSOR] is the name of the sensor.
 In this case developer must pass to the factory only the SensorManager
 and the delay; there are two possibilities: developer can pass also the
 observer or not (the observer can be not necessary, for example if the
 application not constantly need notification of the update but only want
 to request SensorData in specific times).
\end_layout

\begin_layout Standard
AndroidSensorFactory code is shown below:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
AndroidSensorFactory.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorSupport.implementations;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.implementations.environmentSensors.*;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.implementations.motionSensors.*;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.implementations.positionSensors.*;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.interfaces.*;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.interfaces.environmentSensors.*;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.interfaces.motionSensors.*;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.interfaces.positionSensors.*;
\end_layout

\begin_layout Plain Layout

import it.unibo.is.interfaces.IObserver;
\end_layout

\begin_layout Plain Layout

import android.hardware.Sensor; 
\end_layout

\begin_layout Plain Layout

import android.hardware.SensorManager;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class AndroidSensorFactory {
\end_layout

\begin_layout Plain Layout

	public static IAndroidSensor getSensor(SensorManager manager, int type,
 
\end_layout

\begin_layout Plain Layout

											int delay, IObserver observer){
\end_layout

\begin_layout Plain Layout

		IAndroidSensor sensor = null;
\end_layout

\begin_layout Plain Layout

		switch(type){ 		
\end_layout

\begin_layout Plain Layout

			/*
\end_layout

\begin_layout Plain Layout

			 * MOTION SENSORS 
\end_layout

\begin_layout Plain Layout

			 */ 	
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_ACCELEROMETER:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidAccelerometer.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_LINEAR_ACCELERATION:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidLinearAcceleration.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_GYROSCOPE:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidGyroscope.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_GYROSCOPE_UNCALIBRATED:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidGyroscopeUncalibrated.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_GRAVITY:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidGravity.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_ROTATION_VECTOR:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidRotationVector.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_SIGNIFICANT_MOTION:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidSignificantMotion.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_STEP_DETECTOR:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidStepDetector.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_STEP_COUNTER:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidStepCounter.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;			
\end_layout

\begin_layout Plain Layout

			/*
\end_layout

\begin_layout Plain Layout

			 * POSITION SENSORS 
\end_layout

\begin_layout Plain Layout

			 */ 			
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_MAGNETIC_FIELD:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidMagneticField.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

			case Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidMagneticFieldUncalibrated.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_GAME_ROTATION_VECTOR:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidGameRotationVector.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_GEOMAGNETIC_ROTATION_VECTOR:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidGeomagneticRotationVector.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_PROXIMITY:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidProximity.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			//Only for retro-compatibility
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_ORIENTATION:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidOrientation.getInstance(manager, delay); 
\end_layout

\begin_layout Plain Layout

				break; 			
\end_layout

\begin_layout Plain Layout

			/* 
\end_layout

\begin_layout Plain Layout

			 * ENVIRONMENT SENSORS 
\end_layout

\begin_layout Plain Layout

			 */ 			
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_AMBIENT_TEMPERATURE:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidAmbientTemperature.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_LIGHT:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidLight.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break; 
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_PRESSURE:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidPressure.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_RELATIVE_HUMIDITY:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidRelativeHumidity.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			//Only for retro-compatibility
\end_layout

\begin_layout Plain Layout

			case Sensor.TYPE_TEMPERATURE:
\end_layout

\begin_layout Plain Layout

				sensor = AndroidTemperature.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			default: return null;
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

		if(sensor != null) 
\end_layout

\begin_layout Plain Layout

			sensor.addObserver(observer); 
\end_layout

\begin_layout Plain Layout

		return sensor; 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	/* 
\end_layout

\begin_layout Plain Layout

	 * MOTION SENSORS 
\end_layout

\begin_layout Plain Layout

	 */ 
\end_layout

\begin_layout Plain Layout

	public static IAndroidAccelerometer getAccelerometer(SensorManager manager,
 
\end_layout

\begin_layout Plain Layout

															int delay){
\end_layout

\begin_layout Plain Layout

		return AndroidAccelerometer.getInstance(manager, delay);
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public static IAndroidAccelerometer getAccelerometer(SensorManager manager,
\end_layout

\begin_layout Plain Layout

													int delay, IObserver observer) {
\end_layout

\begin_layout Plain Layout

		IAndroidAccelerometer a = getAccelerometer(manager, delay);
\end_layout

\begin_layout Plain Layout

		if (a != null) 
\end_layout

\begin_layout Plain Layout

			a.addObserver(observer); 
\end_layout

\begin_layout Plain Layout

		return a; 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	...
 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Last two methods are defined also for each other sensors.
\end_layout

\begin_layout Subsection
How AndroidSensorSupport works
\end_layout

\begin_layout Standard
AndroidSensorSupport provides a new layer between the application and the
 AndroidSensorFramework: now developers can insert the business logic tha
 needs sensors informations directly into an observer which is connected
 to the real sensor through the AndroidSensor class (that implemente the
 SensorEventListener and extends the Observable interface.
\end_layout

\begin_layout Standard
The following figure shows how the AndroidSensorSupport works:
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
How Android Sensor Support works
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/AndroidSensorSupport.png
	lyxscale 30
	width 40page%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
How to use AndroidSensorSupport
\end_layout

\begin_layout Standard
The AndroidSensorSupport layer, as mentioned, simplifies the sensors utilization
, and provides to the developer methods to obtain the last updated SensorData
 overcoming the constraint of wait the next sensor update or save values
 each time (it does this operation automatically and transparently).
\end_layout

\begin_layout Standard
In this section is shown how to use this layer also using an example.
\end_layout

\begin_layout Subsubsection
Request a Sensor
\end_layout

\begin_layout Standard
To obtain an instance of a sensor developer have to ask it to the AndroidSensorF
actory that provides to discriminate the type of sensor and then forwards
 the request to the specific AndroidSensor.
 There are three methods to obtain an AndroidSensor:
\end_layout

\begin_layout Enumerate
getSensor(SensorManager, SensorType, Delay, Observer)
\end_layout

\begin_deeper
\begin_layout Standard
This method needs the sensor manager, the type of sensor that the developer
 wants the delay (one of each defined in SensorManager class) and the observer
 that receives a notification each time the SensorData changes.
 The observer can be useful to do some operations with SensorData or apply
 threshold.
 
\end_layout

\begin_layout Standard
In this case is necessary apply a cast to the AndroidSensor type because
 the getSensor method returns a generic IAndroidSensor.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

IAndroidAccelerometer accelerometer = (IAndroidAccelerometer)
\end_layout

\begin_layout Plain Layout

					AndroidSensorFactory.getSensor( manager, 
\end_layout

\begin_layout Plain Layout

													SensorManager.SENSOR_TYPE_ACCELEROMETER,
\end_layout

\begin_layout Plain Layout

													SensorManager.SENSOR_DELAY_NORMAL, 
\end_layout

\begin_layout Plain Layout

													observer);
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
get[SENSOR_TYPE](SensorManager, Delay, Observer)
\end_layout

\begin_deeper
\begin_layout Standard
This method returns a specific type of AndroidSensor, then the cast is not
 necessary.
 Like the getSensor() method needs the sensor manager instance, the delay
 and the observer.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

AndroidLight light = AndroidSensorFactory.getLightSensor(manager, delay,
 observer);
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
get[SENSOR_TYPE](SensorManager, Delay, Observer)
\end_layout

\begin_deeper
\begin_layout Standard
Like the previous method, this returns a specific type of AndroidSensor
 too.
 This method doesn't need the observer, then the developer request a sensor
 that doesn't notifies changes but his data can be obtained calling the
 getData() method.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

AndroidProximity proximity = AndroidSensorFactory.getProximitySensor(manager,
 delay);
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
Unregister sensor
\end_layout

\begin_layout Standard
To unregister a sensor, for example when the application goes onPause()
 and is no longer necessary the sensor usage, developer can call the unregister
 method that detaches the sensor from the sensor manager (that must be passed
 as parameter).
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

gyroscope.unregister(manager);
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection
Operation with SensorData
\end_layout

\begin_layout Standard
There are two ways to do operations whit SensorData: 
\end_layout

\begin_layout Enumerate
Using the getData() method
\end_layout

\begin_deeper
\begin_layout Standard
getData() returns the SensorData which contains all informations about the
 last update.
 After obtaining data, developers, can do what they wants with this:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

AndroidLight light = AndroidSensorFactory.getLightSensor(manager, delay);
\end_layout

\begin_layout Plain Layout

AndroidLightData data = light.getData();
\end_layout

\begin_layout Plain Layout

if(data.getValue < 50)
\end_layout

\begin_layout Plain Layout

	System.out.println("turn on the flash light");
\end_layout

\begin_layout Plain Layout

else
\end_layout

\begin_layout Plain Layout

	System.out.println("sunlight is precious");
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Doing something in the observer
\end_layout

\begin_deeper
\begin_layout Standard
the observer registered to the sensor receives a notification each time
 the sensor updates his data.
 Developer can do in the observer filtering operations.
 Can be defined only one observer for each sensor (in this case developer
 must check which sensor updates data) or an observer for only one sensor.
 In the following code is shown how discriminate which sensor updates the
 observer:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Observer o = new Observer(){
\end_layout

\begin_layout Plain Layout

				@Override
\end_layout

\begin_layout Plain Layout

				public void update(Observable observable, Object data) {
\end_layout

\begin_layout Plain Layout

					if(arg0 instanceof AndroidAccelerometer){
\end_layout

\begin_layout Plain Layout

						AndroidAccelerometerData d = (AndroidAccelerometerData)arg1;
\end_layout

\begin_layout Plain Layout

						if(d.getAcceleration()>THRESHOLD)
\end_layout

\begin_layout Plain Layout

					    	send(d.getJsonRep()); 
\end_layout

\begin_layout Plain Layout

					}
\end_layout

\begin_layout Plain Layout

					else if (arg0 instanceof AndroidProximity){
\end_layout

\begin_layout Plain Layout

						AndroidProximityData d = (AndroidProximityData)arg1;
\end_layout

\begin_layout Plain Layout

						if (d.isPresent)
\end_layout

\begin_layout Plain Layout

							System.out.println("Obstacle detected");
\end_layout

\begin_layout Plain Layout

					}
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

				private void send(String msg){
\end_layout

\begin_layout Plain Layout

					...
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			};
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
In this example are shown all previous methods used in an Android application
 that shows SensorData obtained from four different sensors (Accelerometer,
 Proximity, Light and Temperature), two of which have the same observer
 and the other do not have observers.
\end_layout

\begin_layout Standard
Next code shows the layout used for the application:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
sensorsupport_example.xml
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\sffamily},breaklines=true,language=XML,lastline=67,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<?xml version="1.0" encoding="utf-8"?>
\end_layout

\begin_layout Plain Layout

<LinearLayoutxmlns:android="http://schemas.android.com/apk/res/android"
\end_layout

\begin_layout Plain Layout

    android:layout_width="fill_parent"
\end_layout

\begin_layout Plain Layout

    android:layout_height="fill_parent"
\end_layout

\begin_layout Plain Layout

    android:background="@color/white"
\end_layout

\begin_layout Plain Layout

    android:orientation="vertical" >
\end_layout

\begin_layout Plain Layout

    <TextView
\end_layout

\begin_layout Plain Layout

        android:layout_width="fill_parent"
\end_layout

\begin_layout Plain Layout

        android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

        android:gravity="center"
\end_layout

\begin_layout Plain Layout

        android:paddingTop="20dip"
\end_layout

\begin_layout Plain Layout

        android:text="@string/title"
\end_layout

\begin_layout Plain Layout

        android:textColor="@color/black"
\end_layout

\begin_layout Plain Layout

        android:textSize="20sp"
\end_layout

\begin_layout Plain Layout

        android:textStyle="bold" />
\end_layout

\begin_layout Plain Layout

    <TableLayout
\end_layout

\begin_layout Plain Layout

        android:layout_width="fill_parent"
\end_layout

\begin_layout Plain Layout

        android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

        android:paddingTop="10dip"
\end_layout

\begin_layout Plain Layout

        android:stretchColumns="*" >
\end_layout

\begin_layout Plain Layout

        <TableRow>
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/sen1"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content" 
\end_layout

\begin_layout Plain Layout

               android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:text="@string/sensor1"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey"
\end_layout

\begin_layout Plain Layout

                android:textSize="14sp" />
\end_layout

\begin_layout Plain Layout

            <TextView 
\end_layout

\begin_layout Plain Layout

               android:id="@+id/sen2" 
\end_layout

\begin_layout Plain Layout

               android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

               android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

               android:gravity="center"
\end_layout

\begin_layout Plain Layout

               android:text="@string/sensor2"
\end_layout

\begin_layout Plain Layout

               android:textColor="@color/dark_grey" 
\end_layout

\begin_layout Plain Layout

               android:textSize="14sp" />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

               android:id="@+id/sen3" 
\end_layout

\begin_layout Plain Layout

               android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

               android:layout_height="wrap_content" 
\end_layout

\begin_layout Plain Layout

               android:gravity="center"
\end_layout

\begin_layout Plain Layout

               android:text="@string/sensor3"
\end_layout

\begin_layout Plain Layout

               android:textColor="@color/dark_grey" 
\end_layout

\begin_layout Plain Layout

               android:textSize="14sp" />  
\end_layout

\begin_layout Plain Layout

			<TextView 
\end_layout

\begin_layout Plain Layout

                android:id="@+id/sen4"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:text="@string/sensor4"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey"
\end_layout

\begin_layout Plain Layout

                android:textSize="14sp" />
\end_layout

\begin_layout Plain Layout

        </TableRow>
\end_layout

\begin_layout Plain Layout

		<TableRow>
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/s1x"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey" />
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\sffamily},breaklines=true,language=XML,lastline=67,tabsize=4"
inline false
status open

\begin_layout Plain Layout

        	<TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/s2x"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey" />
\end_layout

\begin_layout Plain Layout

			<TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/s3x"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey" />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/s4x"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey" />
\end_layout

\begin_layout Plain Layout

        </TableRow>
\end_layout

\begin_layout Plain Layout

        <TableRow>
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/s1y"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey" />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/s2y"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey" />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/s3y"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey" />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/s4y"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey" />
\end_layout

\begin_layout Plain Layout

        </TableRow>
\end_layout

\begin_layout Plain Layout

        <TableRow>
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/s1z"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey" />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/s2z"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey" />
\end_layout

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/s3z"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey" />
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\sffamily},breaklines=true,language=XML,lastline=67,tabsize=4"
inline false
status open

\begin_layout Plain Layout

            <TextView
\end_layout

\begin_layout Plain Layout

                android:id="@+id/s4z"
\end_layout

\begin_layout Plain Layout

                android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

                android:gravity="center"
\end_layout

\begin_layout Plain Layout

                android:textColor="@color/dark_grey" />
\end_layout

\begin_layout Plain Layout

          </TableRow>
\end_layout

\begin_layout Plain Layout

    </TableLayout>
\end_layout

\begin_layout Plain Layout

	<TextView
\end_layout

\begin_layout Plain Layout

	    android:id="@+id/other"
\end_layout

\begin_layout Plain Layout

        android:layout_width="fill_parent"
\end_layout

\begin_layout Plain Layout

        android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

        android:gravity="center"
\end_layout

\begin_layout Plain Layout

        android:paddingTop="20dip"
\end_layout

\begin_layout Plain Layout

        android:text="@string/jsonRep"
\end_layout

\begin_layout Plain Layout

        android:textColor="@color/dark_grey"
\end_layout

\begin_layout Plain Layout

        android:textSize="16sp"
\end_layout

\begin_layout Plain Layout

        android:textStyle="bold" />
\end_layout

\begin_layout Plain Layout

</LinearLayout>
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this project are presents, in the src directory two packagers: the first
 one contains the SensorObserver, while the second contains the ExampleActivity.
\end_layout

\begin_layout Paragraph*
SensorObserver
\end_layout

\begin_layout Standard
The SensorObserver implements the IObserver interface and realize the only
 one observer for each sensor.
 The constructor save the instance of the activity as IOutputView then,
 when the AndroidSensor notifies the update use this reference to update
 the GUI.
\end_layout

\begin_layout Standard
This is the code:
\begin_inset Newline newline
\end_inset


\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
SensorObserver.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorSupport.observer;
\end_layout

\begin_layout Plain Layout

import java.util.Observable;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.implementation.environmentSensors.AndroidLightData;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.implementation.environmentSensors.AndroidTemperatur
eData;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.implementation.motionSensors.AndroidAccelerometerDa
ta;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.implementation.positionSensors.AndroidProximityData
;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.implementations.environmentSensors.AndroidAmbien
tTemperature;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.implementations.environmentSensors.AndroidLight;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.implementations.environmentSensors.AndroidTemper
ature;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.implementations.motionSensors.AndroidAcceleromet
er;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.implementations.positionSensors.AndroidProximity
;
\end_layout

\begin_layout Plain Layout

import it.unibo.is.interfaces.IObserver; import it.unibo.is.interfaces.IOutputView;
\end_layout

\begin_layout Plain Layout

public class SensorObserver implements IObserver { 
\end_layout

\begin_layout Plain Layout

	IOutputView view; 
\end_layout

\begin_layout Plain Layout

	public SensorObserver(IOutputView v){
\end_layout

\begin_layout Plain Layout

		view = v;
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public void update(Observable arg0, Object arg1) {
\end_layout

\begin_layout Plain Layout

		if(arg0 instanceof AndroidAccelerometer){
\end_layout

\begin_layout Plain Layout

			AndroidAccelerometerData d = (AndroidAccelerometerData)arg1;
\end_layout

\begin_layout Plain Layout

	    	view.setOutput(d.getJsonRep());
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else if(arg0 instanceof AndroidProximity){
\end_layout

\begin_layout Plain Layout

			AndroidProximityData d = (AndroidProximityData)arg1;
\end_layout

\begin_layout Plain Layout

			view.setOutput(d.getJsonRep());
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else if(arg0 instanceof AndroidLight){
\end_layout

\begin_layout Plain Layout

			AndroidLightData d = (AndroidLightData)arg1;
\end_layout

\begin_layout Plain Layout

			view.setOutput(d.getJsonRep());
\end_layout

\begin_layout Plain Layout

	    }
\end_layout

\begin_layout Plain Layout

		else if((arg0 instanceof AndroidTemperature) || (arg0 instanceof AndroidAmbien
tTemperature)){
\end_layout

\begin_layout Plain Layout

			AndroidTemperatureData d = (AndroidTemperatureData)arg1; 
\end_layout

\begin_layout Plain Layout

			view.setOutput(d.getJsonRep());
\end_layout

\begin_layout Plain Layout

	    } 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
ExampleActivity
\end_layout

\begin_layout Standard
The ExampleActivity implements IOutputView.
 This interface provides methods to update the GUI, the only one used in
 this application is setOutput(msg).
 In this method is used the AndroidSensorDataUtils to rebuild the SensorData
 from a JSON string, then, according with the SensorData type the application
 updates the interested text field.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset


\family typewriter
\shape slanted
\color black
ExampleActivity.java
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package it.unibo.android.sensorSupport.example;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.IAndroidSensorData;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.motionSensors.IAndroidAccelerometerData;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.interfaces.positionSensors.IAndroidProximityData;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorData.utils.AndroidSensorDataUtils;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.example.R;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.implementations.AndroidSensorFactory;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.interfaces.environmentSensors.IAndroidLight;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.interfaces.environmentSensors.IAndroidTemperatur
e;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.interfaces.motionSensors.IAndroidAccelerometer;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.interfaces.positionSensors.IAndroidProximity;
\end_layout

\begin_layout Plain Layout

import it.unibo.android.sensorSupport.observer.SensorObserver;
\end_layout

\begin_layout Plain Layout

import it.unibo.is.interfaces.IOutputView;
\end_layout

\begin_layout Plain Layout

import android.app.Activity;
\end_layout

\begin_layout Plain Layout

import android.content.Context;
\end_layout

\begin_layout Plain Layout

import android.hardware.Sensor;
\end_layout

\begin_layout Plain Layout

import android.hardware.SensorManager;
\end_layout

\begin_layout Plain Layout

import android.widget.TextView;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class ExampleActivity extends Activity implements IOutputView { 
\end_layout

\begin_layout Plain Layout

	private SensorManager mSensorManager;
\end_layout

\begin_layout Plain Layout

    private IAndroidAccelerometer sensor_1;
\end_layout

\begin_layout Plain Layout

    private IAndroidProximity sensor_2;
\end_layout

\begin_layout Plain Layout

    private IAndroidLight sensor_3;
\end_layout

\begin_layout Plain Layout

    private IAndroidTemperature sensor_4;
\end_layout

\begin_layout Plain Layout

    private TextView textSensor1;
\end_layout

\begin_layout Plain Layout

	private TextView textSensor2; 
\end_layout

\begin_layout Plain Layout

	private TextView textSensor3;
\end_layout

\begin_layout Plain Layout

	private TextView textSensor4;
\end_layout

\begin_layout Plain Layout

	private TextView textX1, textY1, textZ1;
\end_layout

\begin_layout Plain Layout

	private TextView textX2, textY2, textZ2;
\end_layout

\begin_layout Plain Layout

	private TextView textX3, textY3, textZ3;
\end_layout

\begin_layout Plain Layout

	private TextView textX4, textY4, textZ4; 
\end_layout

\begin_layout Plain Layout

	private TextView textOther; 
\end_layout

\begin_layout Plain Layout

	private SensorObserver observer;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	protected void onStart() {
\end_layout

\begin_layout Plain Layout

		super.onStart();
\end_layout

\begin_layout Plain Layout

        setContentView(R.layout.sensorsupport_example);
\end_layout

\begin_layout Plain Layout

		//obtain views' references
\end_layout

\begin_layout Plain Layout

        textSensor1 = (TextView)findViewById(R.id.sen1);
\end_layout

\begin_layout Plain Layout

        textSensor2 = (TextView)findViewById(R.id.sen2);
\end_layout

\begin_layout Plain Layout

        textSensor3 = (TextView)findViewById(R.id.sen3);
\end_layout

\begin_layout Plain Layout

        textSensor4 = (TextView)findViewById(R.id.sen4);
\end_layout

\begin_layout Plain Layout

		textX1 = (TextView)findViewById(R.id.s1x);
\end_layout

\begin_layout Plain Layout

		textY1 = (TextView)findViewById(R.id.s1y);
\end_layout

\begin_layout Plain Layout

		textZ1 = (TextView)findViewById(R.id.s1z);
\end_layout

\begin_layout Plain Layout

		textX2 = (TextView)findViewById(R.id.s2x);
\end_layout

\begin_layout Plain Layout

		textY2 = (TextView)findViewById(R.id.s2y);
\end_layout

\begin_layout Plain Layout

		textZ2 = (TextView)findViewById(R.id.s2z);
\end_layout

\begin_layout Plain Layout

		textX3 = (TextView)findViewById(R.id.s3x);
\end_layout

\begin_layout Plain Layout

		textY3 = (TextView)findViewById(R.id.s3y);
\end_layout

\begin_layout Plain Layout

		textZ3 = (TextView)findViewById(R.id.s3z);
\end_layout

\begin_layout Plain Layout

		textX4 = (TextView)findViewById(R.id.s4x);
\end_layout

\begin_layout Plain Layout

		textY4 = (TextView)findViewById(R.id.s4y);
\end_layout

\begin_layout Plain Layout

		textZ4 = (TextView)findViewById(R.id.s4z);
\end_layout

\begin_layout Plain Layout

		textOther = (TextView)findViewById(R.id.other);
\end_layout

\begin_layout Plain Layout

		//obtain sensor manager
\end_layout

\begin_layout Plain Layout

		mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
\end_layout

\begin_layout Plain Layout

        //ask sensors to AndroidSensorFactory
\end_layout

\begin_layout Plain Layout

        initSensors();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

    private void initSensors(){
\end_layout

\begin_layout Plain Layout

    	observer = new SensorObserver(this);
\end_layout

\begin_layout Plain Layout

		sensor_1 = (IAndroidAccelerometer) AndroidSensorFactory.getSensor(mSensorManage
r,
\end_layout

\begin_layout Plain Layout

 													Sensor.TYPE_ACCELEROMETER,
\end_layout

\begin_layout Plain Layout

 													SensorManager.SENSOR_DELAY_NORMAL,
\end_layout

\begin_layout Plain Layout

			  									   observer);
\end_layout

\begin_layout Plain Layout

    	sensor_2 = AndroidSensorFactory.getProximity(mSensorManager,
\end_layout

\begin_layout Plain Layout

     												SensorManager.SENSOR_DELAY_FASTEST,
\end_layout

\begin_layout Plain Layout

    												 observer);
\end_layout

\begin_layout Plain Layout

    	sensor_3 = AndroidSensorFactory.getLightSensor(mSensorManager,
\end_layout

\begin_layout Plain Layout

     												SensorManager.SENSOR_DELAY_NORMAL);
\end_layout

\begin_layout Plain Layout

    	sensor_4 = AndroidSensorFactory.getAmbientTemperatureSensor(mSensorManager,
\end_layout

\begin_layout Plain Layout

 													SensorManager.SENSOR_DELAY_NORMAL);
\end_layout

\begin_layout Plain Layout

    	if(sensor_4 == null)
\end_layout

\begin_layout Plain Layout

    		sensor_4 = AndroidSensorFactory.getTemperature(mSensorManager,
\end_layout

\begin_layout Plain Layout

							 					SensorManager.SENSOR_DELAY_NORMAL);
\end_layout

\begin_layout Plain Layout

    	textSensor1.setText("Accelerometer");
\end_layout

\begin_layout Plain Layout

    	textSensor2.setText("Proximity");
\end_layout

\begin_layout Plain Layout

    	textSensor3.setText("Light");
\end_layout

\begin_layout Plain Layout

    	textSensor4.setText("Temperature");
\end_layout

\begin_layout Plain Layout

    	if (sensor_1 == null) {  
\end_layout

\begin_layout Plain Layout

			textX1.setText("not");  
\end_layout

\begin_layout Plain Layout

			textY1.setText("present");
\end_layout

\begin_layout Plain Layout

    	}
\end_layout

\begin_layout Plain Layout

    	if (sensor_2 == null) { 
\end_layout

\begin_layout Plain Layout

			textX2.setText("not");
\end_layout

\begin_layout Plain Layout

			textY2.setText("present");
\end_layout

\begin_layout Plain Layout

    	}
\end_layout

\begin_layout Plain Layout

    	if (sensor_3 == null) {
\end_layout

\begin_layout Plain Layout

			textX3.setText("not");
\end_layout

\begin_layout Plain Layout

			textY3.setText("present");
\end_layout

\begin_layout Plain Layout

    	}
\end_layout

\begin_layout Plain Layout

		if (sensor_4 == null) {   
\end_layout

\begin_layout Plain Layout

			textX4.setText("not");
\end_layout

\begin_layout Plain Layout

			textY4.setText("present");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

         
\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	protected void onResume() {
\end_layout

\begin_layout Plain Layout

		super.onResume();
\end_layout

\begin_layout Plain Layout

		if((sensor_1 == null) && (sensor_2 == null) && 
\end_layout

\begin_layout Plain Layout

		   (sensor_3 == null) && (sensor_4 == null))
\end_layout

\begin_layout Plain Layout

				initSensors();   
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	protected void onPause() {
\end_layout

\begin_layout Plain Layout

		super.onPause();
\end_layout

\begin_layout Plain Layout

		if(sensor_1 != null)
\end_layout

\begin_layout Plain Layout

			sensor_1.unregister(mSensorManager);
\end_layout

\begin_layout Plain Layout

		if(sensor_2 != null)
\end_layout

\begin_layout Plain Layout

			sensor_2.unregister(mSensorManager);
\end_layout

\begin_layout Plain Layout

		if(sensor_3 != null)
\end_layout

\begin_layout Plain Layout

			sensor_3.unregister(mSensorManager);
\end_layout

\begin_layout Plain Layout

		if(sensor_4 != null)
\end_layout

\begin_layout Plain Layout

			sensor_4.unregister(mSensorManager);
\end_layout

\begin_layout Plain Layout

		sensor_1 = null;
\end_layout

\begin_layout Plain Layout

		sensor_2 = null;
\end_layout

\begin_layout Plain Layout

		sensor_3 = null; 
\end_layout

\begin_layout Plain Layout

		sensor_4 = null;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public String getCurVal() {
\end_layout

\begin_layout Plain Layout

		return null; 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true,comment={[l]{//}},commentstyle={\color{darkgreen}\ttfamily},emph={int, boolean, int, float, double, List,  Sensor, SensorManager, Context, Bundle, ArrayList, Activity, View, AdapterView, OnItemSelectedListener, ArrayAdapter, Spinner, TextView},emphstyle={\color{blue}},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, int, long, this, new},keywordstyle={\color{magenta}\bfseries},language=Java,lastline=67,morecomment={[s]{/*}{*/}},ndkeywords={class, export, @Override},ndkeywordstyle={\color{gray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public void addOutput(String msg) { }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

	public void setOutput(String msg) {
\end_layout

\begin_layout Plain Layout

		IAndroidSensorData d = AndroidSensorDataUtils.buildDataFromJson(msg);
\end_layout

\begin_layout Plain Layout

		if(d instanceof IAndroidAccelerometerData){
\end_layout

\begin_layout Plain Layout

			IAndroidAccelerometerData a = (IAndroidAccelerometerData)d;
\end_layout

\begin_layout Plain Layout

			textX1.setText(""+a.getAccelerationX());
\end_layout

\begin_layout Plain Layout

			textY1.setText(""+a.getAccelerationY());
\end_layout

\begin_layout Plain Layout

			textZ1.setText(""+a.getAccelerationZ());
\end_layout

\begin_layout Plain Layout

			if(sensor_4 != null){
\end_layout

\begin_layout Plain Layout

				textX4.setText(""+sensor_4.getData().getTemperatureCelsius());
\end_layout

\begin_layout Plain Layout

				textY4.setText(""+sensor_4.getData().getTemperatureFarenheit());
\end_layout

\begin_layout Plain Layout

				textZ4.setText(""+sensor_4.getData().getTemperatureKelvin());
\end_layout

\begin_layout Plain Layout

				textOther.setText(sensor_4.getData().getJsonRep()+"
\backslash
n
\backslash
n"+a.getName()+" changed");
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			else
\end_layout

\begin_layout Plain Layout

				textOther.setText("sensor_4 not present
\backslash
n
\backslash
n"+a.getName()+" changed");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else if (d instanceof IAndroidProximityData){
\end_layout

\begin_layout Plain Layout

			IAndroidProximityData p = (IAndroidProximityData)d;
\end_layout

\begin_layout Plain Layout

			textX2.setText(""+p.getValue());
\end_layout

\begin_layout Plain Layout

			textY2.setText(""+p.isPresent());
\end_layout

\begin_layout Plain Layout

			textZ2.setText("");
\end_layout

\begin_layout Plain Layout

			if(sensor_3 != null){
\end_layout

\begin_layout Plain Layout

				textX3.setText(""+sensor_3.getData().getValue());
\end_layout

\begin_layout Plain Layout

				textY3.setText("");
\end_layout

\begin_layout Plain Layout

				textZ3.setText("");
\end_layout

\begin_layout Plain Layout

	 		   textOther.setText(sensor_3.getData().getJsonRep()+"
\backslash
n
\backslash
n"+p.getName()+" changed");
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			else 
\end_layout

\begin_layout Plain Layout

				textOther.setText("sensor_3 not present
\backslash
n
\backslash
n"+p.getName()+" changed");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
In this paper is defined a new layer between Android Sensor Framework and
 the Android application that provides some useful features:
\end_layout

\begin_layout Itemize
the new sensor classes are not only observer of the real sensor but also
 observable
\end_layout

\begin_layout Itemize
the onSensorChange() method updates transparently the SensorData and notifies
 this update to all observers
\end_layout

\begin_layout Itemize
in introduced a SensorData model that contains all sensor data informations
 relative to the last update and provide a JSON and a Prolog representation
\end_layout

\begin_layout Itemize
is defined an AndroidSensorFactory that returns a specific sensor and provides
 to registrate the AndroidSensor to the SensorManager
\end_layout

\begin_layout Itemize
is defined an SensorDataUtils class that rebuild the SensorData from a JSON
 string representation
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "androidDev"

\end_inset

Android Developer, "Sensors Overview", 
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
target "http://developer.android.com/guide/topics/sensors/sensors_overview.htm"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "TimeStamp"

\end_inset

Android Open Source Project (AOSP) Issue Tracker, 
\begin_inset Quotes eld
\end_inset

SensorEvent timestamp field incorrectly populated on Nexus 4 devices
\begin_inset Quotes erd
\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
target "https://code.google.com/p/android/issues/detail?id=56561#c2"

\end_inset


\end_layout

\end_body
\end_document
